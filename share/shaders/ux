#version 450

layout(set = 0, binding = 0) uniform UX {
    mat4 model;
    mat4 view;
    mat4 proj;
    vec4 background_color;
    vec4 highlight_color;
} ux;

layout(set = 1, binding = 0)  uniform sampler2D tx_background;
layout(set = 1, binding = 1)  uniform sampler2D tx_frost;
layout(set = 1, binding = 2)  uniform sampler2D tx_blur;
layout(set = 1, binding = 3)  uniform sampler2D tx_compose;
layout(set = 1, binding = 4)  uniform sampler2D tx_colorize;
layout(set = 1, binding = 5)  uniform sampler2D tx_overlay;

// colorize is used as a hue shift or colorize with compose.g

// colorize props:
// r = hue
// g = sat
// b = lum
// a = ...

// compose props:
// r = background ... blur ... frost
// g = colorize (0 == photoshop hue shift, 1 == photoshop colorize)
// b = transparency
// a = ...


// Convert hue [0..1], sat, val â†’ RGB
vec3 hsv2rgb(vec3 c) {
    vec3 rgb = clamp(abs(mod(c.x * 6.0 + vec3(0, 4, 2), 6.0) - 3.0) - 1.0, 0.0, 1.0);
    return c.z * mix(vec3(1.0), rgb, c.y);
}

vec3 rgb2hsv(vec3 c) {
    float r = c.r;
    float g = c.g;
    float b = c.b;

    float maxc = max(r, max(g, b));
    float minc = min(r, min(g, b));
    float delta = maxc - minc;

    float h = 0.0;
    if (delta > 0.0) {
        if (maxc == r) {
            h = mod((g - b) / delta, 6.0);
        } else if (maxc == g) {
            h = (b - r) / delta + 2.0;
        } else {
            h = (r - g) / delta + 4.0;
        }
        h /= 6.0;
        if (h < 0.0) h += 1.0;
    }

    float s = (maxc == 0.0) ? 0.0 : delta / maxc;
    float v = maxc;

    return vec3(h, s, v);
}
