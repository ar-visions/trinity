#ifndef _TRINITY_
#define _TRINITY_

#include <A>
#include <vec>

typedef void* skia_t;
typedef void* handle_t;

skia_t skia_init_vk(handle_t vk_instance, handle_t phys, handle_t device, handle_t queue, unsigned int graphics_family, unsigned int vk_version);


#define Key_schema(X, YY) \
    enum_value_v(X, YY, Undefined,      0) \
    enum_value_v(X, YY, Space,         32) \
    enum_value_v(X, YY, Apostrophe,    39) \
    enum_value_v(X, YY, Comma,         44) \
    enum_value_v(X, YY, Minus,         45) \
    enum_value_v(X, YY, Period,        46) \
    enum_value_v(X, YY, Slash,         47) \
    enum_value_v(X, YY, K0,            48) \
    enum_value_v(X, YY, K1,            49) \
    enum_value_v(X, YY, K2,            50) \
    enum_value_v(X, YY, K3,            51) \
    enum_value_v(X, YY, K4,            52) \
    enum_value_v(X, YY, K5,            53) \
    enum_value_v(X, YY, K6,            54) \
    enum_value_v(X, YY, K7,            55) \
    enum_value_v(X, YY, K8,            56) \
    enum_value_v(X, YY, K9,            57) \
    enum_value_v(X, YY, SemiColon,     59) \
    enum_value_v(X, YY, Equal,         61) \
    enum_value_v(X, YY, A,             65) \
    enum_value_v(X, YY, B,             66) \
    enum_value_v(X, YY, C,             67) \
    enum_value_v(X, YY, D,             68) \
    enum_value_v(X, YY, E,             69) \
    enum_value_v(X, YY, F,             70) \
    enum_value_v(X, YY, G,             71) \
    enum_value_v(X, YY, H,             72) \
    enum_value_v(X, YY, I,             73) \
    enum_value_v(X, YY, J,             74) \
    enum_value_v(X, YY, K,             75) \
    enum_value_v(X, YY, L,             76) \
    enum_value_v(X, YY, M,             77) \
    enum_value_v(X, YY, N,             78) \
    enum_value_v(X, YY, O,             79) \
    enum_value_v(X, YY, P,             80) \
    enum_value_v(X, YY, Q,             81) \
    enum_value_v(X, YY, R,             82) \
    enum_value_v(X, YY, S,             83) \
    enum_value_v(X, YY, T,             84) \
    enum_value_v(X, YY, U,             85) \
    enum_value_v(X, YY, V,             86) \
    enum_value_v(X, YY, W,             87) \
    enum_value_v(X, YY, X,             88) \
    enum_value_v(X, YY, Y,             89) \
    enum_value_v(X, YY, Z,             90) \
    enum_value_v(X, YY, LeftBracket,   91) \
    enum_value_v(X, YY, BackSlash,     92) \
    enum_value_v(X, YY, RightBracket,  93) \
    enum_value_v(X, YY, GraveAccent,   96) \
    enum_value_v(X, YY, World1,       161) \
    enum_value_v(X, YY, World2,       162) \
    enum_value_v(X, YY, Escape,       256) \
    enum_value_v(X, YY, Enter,        257) \
    enum_value_v(X, YY, Tab,          258) \
    enum_value_v(X, YY, Backspace,    259) \
    enum_value_v(X, YY, Insert,       260) \
    enum_value_v(X, YY, Delete,       261) \
    enum_value_v(X, YY, Right,        262) \
    enum_value_v(X, YY, Left,         263) \
    enum_value_v(X, YY, Down,         264) \
    enum_value_v(X, YY, Up,           265) \
    enum_value_v(X, YY, PageUp,       266) \
    enum_value_v(X, YY, PageDown,     267) \
    enum_value_v(X, YY, Home,         268) \
    enum_value_v(X, YY, End,          269) \
    enum_value_v(X, YY, CapsLock,     280) \
    enum_value_v(X, YY, ScrollLock,   281) \
    enum_value_v(X, YY, NumLock,      282) \
    enum_value_v(X, YY, PrintScreen,  283) \
    enum_value_v(X, YY, Pause,        284) \
    enum_value_v(X, YY, F1,           290) \
    enum_value_v(X, YY, F2,           291) \
    enum_value_v(X, YY, F3,           292) \
    enum_value_v(X, YY, F4,           293) \
    enum_value_v(X, YY, F5,           294) \
    enum_value_v(X, YY, F6,           295) \
    enum_value_v(X, YY, F7,           296) \
    enum_value_v(X, YY, F8,           297) \
    enum_value_v(X, YY, F9,           298) \
    enum_value_v(X, YY, F10,          299) \
    enum_value_v(X, YY, F11,          300) \
    enum_value_v(X, YY, F12,          301) \
    enum_value_v(X, YY, F13,          302) \
    enum_value_v(X, YY, F14,          303) \
    enum_value_v(X, YY, F15,          304) \
    enum_value_v(X, YY, F16,          305) \
    enum_value_v(X, YY, F17,          306) \
    enum_value_v(X, YY, F18,          307) \
    enum_value_v(X, YY, F19,          308) \
    enum_value_v(X, YY, F20,          309) \
    enum_value_v(X, YY, F21,          310) \
    enum_value_v(X, YY, F22,          311) \
    enum_value_v(X, YY, F23,          312) \
    enum_value_v(X, YY, F24,          313) \
    enum_value_v(X, YY, F25,          314) \
    enum_value_v(X, YY, Kp0,          320) \
    enum_value_v(X, YY, Kp1,          321) \
    enum_value_v(X, YY, Kp2,          322) \
    enum_value_v(X, YY, Kp3,          323) \
    enum_value_v(X, YY, Kp4,          324) \
    enum_value_v(X, YY, Kp5,          325) \
    enum_value_v(X, YY, Kp6,          326) \
    enum_value_v(X, YY, Kp7,          327) \
    enum_value_v(X, YY, Kp8,          328) \
    enum_value_v(X, YY, Kp9,          329) \
    enum_value_v(X, YY, KpDecimal,    330) \
    enum_value_v(X, YY, KpDivide,     331) \
    enum_value_v(X, YY, KpMultiply,   332) \
    enum_value_v(X, YY, KpSubtract,   333) \
    enum_value_v(X, YY, KpAdd,        334) \
    enum_value_v(X, YY, KpEnter,      335) \
    enum_value_v(X, YY, KpEqual,      336) \
    enum_value_v(X, YY, LeftShift,    340) \
    enum_value_v(X, YY, LeftControl,  341) \
    enum_value_v(X, YY, LeftAlt,      342) \
    enum_value_v(X, YY, LeftSuper,    343) \
    enum_value_v(X, YY, RightShift,   344) \
    enum_value_v(X, YY, RightControl, 345) \
    enum_value_v(X, YY, RightAlt,     346) \
    enum_value_v(X, YY, RightSuper,   347) \
    enum_value_v(X, YY, Menu,         348)
declare_enum(Key)

/*

A.png → Base Color
R.png → Roughness
M.png → Metalness
N.png → Normal Map
H.png → Height/Parallax
O.png → Ambient Occlusion
S.png → Specular
E.png → Emission
C.png → Clearcoat
T.png → Transmission

*/

/// object("string") creates a string
/// object(1) creates a primitive i64
/// object(1.2f) creates a primitive f32
/// object(1.2) creates f64

declare_sentry(Zero);
declare_sentry(One);
declare_sentry(Two);
declare_sentry(Three);
declare_sentry(Four);

#define ComponentType_schema(X,Y,...) \
    enum_value_v(X,Y, NONE,           0) \
    enum_value_v(X,Y, BYTE,           5120) \
    enum_value_v(X,Y, UNSIGNED_BYTE,  5121) \
    enum_value_v(X,Y, SHORT,          5122) \
    enum_value_v(X,Y, UNSIGNED_SHORT, 5123) \
    enum_value_v(X,Y, UNSIGNED_INT,   5125) \
    enum_value_v(X,Y, FLOAT,          5126)
declare_enum(ComponentType)

#define CompoundType_schema(X,Y,...) \
    enum_value_v(X,Y, NONE,           0) \
    enum_value_v(X,Y, SCALAR,         1) \
    enum_value_v(X,Y, VEC2,           2) \
    enum_value_v(X,Y, VEC3,           3) \
    enum_value_v(X,Y, VEC4,           4) \
    enum_value_v(X,Y, MAT2,           5) \
    enum_value_v(X,Y, MAT3,           6) \
    enum_value_v(X,Y, MAT4,           7)
declare_enum(CompoundType)

#define World_schema(X,Y,...) \
    i_prop   (X,Y, public,     vec4f, pos) \
    i_prop   (X,Y, public,     vec4f, dir) \
    i_prop   (X,Y, public,     mat4f, model) \
    i_prop   (X,Y, public,     mat4f, view) \
    i_prop   (X,Y, public,     mat4f, proj) \
    i_override(X,Y, method, init)
#ifndef World_intern
#define World_intern
#endif
declare_class(World)

#define Surface_schema(X,Y,...) \
    enum_value_v_2(X,Y, none,           0, Zero) \
    enum_value_v_2(X,Y, color,          1, Four) \
    enum_value_v_2(X,Y, normal,         2, Four) \
    enum_value_v_2(X,Y, emission,       3, Four) \
    enum_value_v_2(X,Y, rough,          4, One) \
    enum_value_v_2(X,Y, metal,          5, One) \
    enum_value_v_2(X,Y, height,         6, One) \
    enum_value_v_2(X,Y, ao,             7, One) \
    enum_value_v_2(X,Y, environment,    8, Four)
declare_enum(Surface)

typedef struct _pipeline* pipeline;
typedef struct _shader* shader;
#define trinity_schema(X,Y,...) \
    i_prop    (X,Y, intern,     VkInstance,          instance) \
    i_prop    (X,Y, intern,     VkSampleCountFlagBits, msaa_samples) \
    i_prop    (X,Y, intern,     VkPhysicalDevice,    physical_device) \
    i_prop    (X,Y, intern,     VkDevice,            device) \
    i_prop    (X,Y, intern,     VkQueue,             queue) \
    i_prop    (X,Y, intern,     VkDebugUtilsMessengerEXT, debug) \
    i_prop    (X,Y, intern,     VkCommandPool,       command_pool) \
    i_prop    (X,Y, intern,     i32,                 queue_family_index) \
    i_prop    (X,Y, intern,     map,                 device_memory) \
    i_prop    (X,Y, intern,     handle,              skia) \
    i_prop    (X,Y, public,     bool,                rt_support) \
    i_override(X,Y, method,     init, destructor)
#ifndef trinity_intern
#define trinity_intern
#endif
declare_class(trinity)

#define shader_schema(X,Y,...) \
    i_prop    (X,Y, required,   trinity,            t) \
    i_prop    (X,Y, required,   string,             name) \
    i_prop    (X,Y, public,     string,             vert)  \
    i_prop    (X,Y, public,     string,             frag)  \
    i_prop    (X,Y, public,     string,             comp)  \
    i_prop    (X,Y, intern,     VkShaderModule,     vk_vert) \
    i_prop    (X,Y, intern,     VkShaderModule,     vk_frag) \
    i_prop    (X,Y, intern,     VkShaderModule,     vk_comp) \
    i_override(X,Y, method,     init, destructor)
#ifndef shader_intern
#define shader_intern
#endif
declare_class(shader)

typedef struct _pipeline* pipeline;
typedef struct _model*    model;


#define buffer_schema(X,Y,...) \
    i_prop    (X,Y, required,   trinity,            t) \
    i_prop    (X,Y, required,   i64,                size) \
    i_prop    (X,Y, public,     ARef,               data) \
    i_prop    (X,Y, public,     bool,               u_src) \
    i_prop    (X,Y, public,     bool,               u_dst) \
    i_prop    (X,Y, public,     bool,               u_shader) \
    i_prop    (X,Y, public,     bool,               u_uniform) \
    i_prop    (X,Y, public,     bool,               u_vertex) \
    i_prop    (X,Y, public,     bool,               u_index) \
    i_prop    (X,Y, public,     bool,               u_storage) \
    i_prop    (X,Y, public,     bool,               m_device_local) \
    i_prop    (X,Y, public,     bool,               m_host_visible) \
    i_prop    (X,Y, public,     bool,               m_host_coherent) \
    i_prop    (X,Y, intern,     VkDeviceMemory,     vk_memory) \
    i_prop    (X,Y, intern,     VkBuffer,           vk_buffer) \
    i_method  (X,Y, public,     none,               update, ARef) \
    i_method  (X,Y, public,     ARef,               mmap) \
    i_method  (X,Y, public,     none,               unmap) \
    i_override(X,Y, method,     init, destructor)
#ifndef buffer_intern
#define buffer_intern
#endif
declare_class(buffer)

#define window_schema(X,Y,...) \
    i_prop    (X,Y, intern,     handle,                 window) \
    i_prop    (X,Y, intern,     VkSurfaceKHR,           surface) \
    i_prop    (X,Y, intern,     VkSwapchainKHR,         swapchain) \
    i_prop    (X,Y, intern,     array,                  models) \
    i_prop    (X,Y, intern,     VkSurfaceCapabilitiesKHR, surface_caps) \
    i_prop    (X,Y, intern,     VkSurfaceFormatKHR,     surface_format) \
    i_prop    (X,Y, intern,     VkPresentModeKHR,       present_mode) \
    i_prop    (X,Y, intern,     VkExtent2D,             extent) \
    i_prop    (X,Y, intern,     VkRenderPass,           render_pass) \
    i_prop    (X,Y, intern,     VkFramebuffer*,         framebuffers) \
    i_prop    (X,Y, intern,     VkImage*,               depth_images) \
    i_prop    (X,Y, intern,     VkImageView*,           depth_image_views) \
    i_prop    (X,Y, intern,     VkDeviceMemory*,        depth_image_memory) \
    i_prop    (X,Y, intern,     VkImage,                resolve_image) \
    i_prop    (X,Y, intern,     VkImageView,            resolve_view) \
    i_prop    (X,Y, intern,     VkDeviceMemory,         resolve_memory) \
    i_prop    (X,Y, intern,     VkImage,                color_image) \
    i_prop    (X,Y, intern,     VkImageView,            color_view) \
    i_prop    (X,Y, intern,     VkDeviceMemory,         color_memory) \
    i_prop    (X,Y, intern,     u32,                    image_count) \
    i_prop    (X,Y, intern,     VkFence*,               command_fences) \
    i_prop    (X,Y, intern,     VkCommandBuffer*,       command_buffers) \
    i_prop    (X,Y, intern,     VkSemaphore*,           image_available_semaphore) \
    i_prop    (X,Y, intern,     VkSemaphore*,           render_finished_semaphore) \
    i_prop    (X,Y, intern,     VkFence,                in_flight_fence) \
    i_prop    (X,Y, intern,     VkSwapchainCreateInfoKHR, config) \
    i_prop    (X,Y, intern,     ARef,                   loop_callback) \
    i_prop    (X,Y, intern,     ARef,                   loop_arg) \
    i_prop    (X,Y, required,   trinity,                t) \
    i_prop    (X,Y, required,   u32,                    width) \
    i_prop    (X,Y, required,   u32,                    height) \
    i_prop    (X,Y, required,   string,                 title) \
    i_method  (X,Y, public,     i32,                    loop, ARef, ARef) \
    i_method  (X,Y, public,     none,                   push, model) \
    i_override(X,Y, method,     init, destructor)
#ifndef window_intern
#define window_intern
#endif
declare_class(window)

#define Pixel_schema(X,Y,...) \
    enum_value_v(X,Y, none,            0) \
    enum_value_v(X,Y, rgba8,           1) \
    enum_value_v(X,Y, rgb8,            2) \
    enum_value_v(X,Y, rgbf32,          3) \
    enum_value_v(X,Y, u8,              4) \
    enum_value_v(X,Y, rgbaf32,         5) \
    enum_value_v(X,Y, f32,             6)
declare_enum(Pixel)

// a good idea is to make this more of 'ANY' ability of filter
// if filter set to an object, that object could dictate more filter arguments for a general purpose filter
// this is something used by the system
#define Filter_schema(X,Y,...) \
    enum_value_v(X,Y, none,            0) \
    enum_value_v(X,Y, nearest,         1) \
    enum_value_v(X,Y, bilinear,        3) \
    enum_value_v(X,Y, trilinear,       4) \
    enum_value_v(X,Y, low,             5) \
    enum_value_v(X,Y, med,             6) \
    enum_value_v(X,Y, high,            7)
declare_enum(Filter)

#define image_schema(X,Y,...) \
    i_ctr (X,Y, public, string) \
    i_ctr (X,Y, public, symbol) \
    i_ctr (X,Y, public, cstr) \
    i_prop    (X,Y, public,     path,                   uri) \
    i_prop    (X,Y, public,     Surface,                surface) \
    i_prop    (X,Y, public,     Pixel,                  format) \
    i_prop    (X,Y, public,     i32,                    pixel_size) \
    i_prop    (X,Y, public,     i32,                    width) \
    i_prop    (X,Y, public,     i32,                    height) \
    i_prop    (X,Y, public,     i32,                    channels) \
    i_prop    (X,Y, public,     Filter,                 filter) \
    i_method  (X,Y, public,     image,                  resize, i32, i32) \
    i_method  (X,Y, public,     i32,                    png, path) \
    i_method  (X,Y, public,     i64,                    byte_count) \
    i_method  (X,Y, public,     i64,                    len) \
    i_method  (X,Y, public,     object,                 get, num) \
    i_override(X,Y, method,     init, destructor) \
    i_override(X,Y, method,     copy)
#ifndef image_intern
#define image_intern
#endif
declare_class(image)

#define canvas_schema(X,Y,...) \
    i_method  (X,Y, public, none, save) \
    i_method  (X,Y, public, none, restore) \
    i_method  (X,Y, public, none, move,   object) \
    i_method  (X,Y, public, none, line,   object) \
    i_method  (X,Y, public, none, color,  object) \
    i_method  (X,Y, public, none, bezier, object, object, object) \
    i_override(X,Y, method,     init, destructor)
#ifndef canvas_intern
#define canvas_intern
#endif
declare_mod(canvas, image)

typedef struct _Accessor* Accessor;
typedef struct vertex_member_t {
    AType    type;
    Accessor ac;
    i64      size;
    i64      offset;
} vertex_member_t;

#define gpu_schema(X,Y,...) \
    i_prop(X,Y, required, trinity,      t) \
    i_prop(X,Y, required, cstr,         name) \
    i_prop(X,Y, public,   image,        sampler) \
    i_prop(X,Y, public,   object,       uniform) \
    i_prop(X,Y, public,   object,       vertex_data) \
    i_prop(X,Y, public,   object,       index_data) \
    i_vprop(X,Y, public,  vertex_member_t, members) \
    i_prop(X,Y, public,   i32,          member_count) \
    i_prop(X,Y, public,   i32,          index_size) \
    i_prop(X,Y, public,   i32,          index_count) \
    i_prop(X,Y, public,   i32,          vertex_size) \
    i_prop(X,Y, public,   i32,          vertex_count) \
    i_prop(X,Y, intern,   VkBuffer,     vk_vertex) \
    i_prop(X,Y, intern,   VkBuffer,     vk_index) \
    i_prop(X,Y, intern,   buffer,       vk_uniform) \
    i_prop(X,Y, intern,   VkImage,      vk_image) \
    i_prop(X,Y, intern,   VkImageView,  vk_image_view) \
    i_prop(X,Y, intern,   VkSampler,    vk_sampler) \
    i_prop(X,Y, intern,   VkDeviceMemory, vk_memory) \
    i_prop(X,Y, public,   bool,         compute) \
    i_method(X,Y, public, none,         sync) \
    i_override(X,Y, method, init, destructor)
#ifndef gpu_intern
#define gpu_intern
#endif
declare_class(gpu)

/// shader is an array
///
typedef struct _Material* Material;
#define pipeline_schema(X,Y,...) \
    i_prop    (X,Y, required,   trinity,                t) \
    i_prop    (X,Y, required,   window,                 w) \
    i_prop    (X,Y, required,   array,                  uniforms) \
    i_prop    (X,Y, public,     mat4f,                  model) \
    i_prop    (X,Y, public,     array,                  samplers) \
    i_prop    (X,Y, required,   shader,                 s) \
    i_prop    (X,Y, intern,     array,                  resources) \
    i_prop    (X,Y, intern,     gpu,                    vbo) \
    i_prop    (X,Y, intern,     gpu,                    memory) \
    i_vprop   (X,Y, intern,     VkDescriptorSetLayout,  descriptor_layout) \
    i_prop    (X,Y, intern,     VkDescriptorPool,       descriptor_pool) \
    i_prop    (X,Y, intern,     VkDescriptorSet,        bind) \
    i_prop    (X,Y, intern,     VkPipeline,             vk_render) \
    i_prop    (X,Y, intern,     VkPipeline,             vk_compute) \
    i_prop    (X,Y, intern,     VkPipelineLayout,       layout) \
    i_prop    (X,Y, intern,     VkDescriptorSet,        descriptor_set) \
    i_method  (X,Y, public,     none, render,           handle) \
    i_method  (X,Y, public,     none, bind_resources) \
    i_override(X,Y, method,     init, destructor)
#ifndef pipeline_intern
#define pipeline_intern
#endif
declare_class(pipeline)

/// will handle different texture overrides and uniforms
/// name must match a Mesh in glTF data
typedef struct _Primitive* Primitive;
#define part_schema(X,Y,...) \
    i_prop    (X,Y, required, Primitive, id) \
    i_prop    (X,Y, public  , shader, s)
#ifndef part_intern
#define part_intern
#endif
declare_class(part)

// we definitely want to allow for a null parts, which will render the entire node with the default shader!
typedef struct _Node* Node;
#define node_schema(X,Y,...) \
    i_prop    (X,Y, public,   Node,   id) \
    i_prop    (X,Y, public,   array,  parts)
#ifndef node_intern
#define node_intern
#endif
declare_class(node)

#define node_default null

// lets store the uniform data for Camera on model
// we render one model at a time (group of pipelines)
// todo: no need for world object on model
typedef struct _Model* Model;
#define model_schema(X,Y,...) \
    i_prop    (X,Y, required, trinity, t) \
    i_prop    (X,Y, required, window,  w) \
    i_prop    (X,Y, required, Model,   id) \
    i_prop    (X,Y, public,   array,   nodes) \
    i_prop    (X,Y, public,   shader,  shader) \
    i_prop    (X,Y, public,   array,   uniforms) \
    i_prop    (X,Y, public,   array,   samplers) \
    i_prop    (X,Y, public,   World,   world) \
    i_prop    (X,Y, intern,   array,   pipelines) \
    i_override(X,Y, method, init, destructor)
#ifndef model_intern
#define model_intern
#endif
declare_class(model)

#define particle_schema(X,Y,...) \
    i_inlay(X,Y, public, vec2f,  pos) \
    i_inlay(X,Y, public, vec2f,  velocity) \
    i_prop(X,Y,  public, f32,    density) \
    i_prop(X,Y,  public, f32,    pressure)
#ifndef particle_intern
#define particle_intern
#endif
declare_class(particle)

/*
#define vertex_schema(X,Y,...) \
    i_inlay(X,Y, public, vec3f,  pos)
#ifndef vertex_intern
#define vertex_intern
#endif
declare_class(vertex)
*/

#define TargetType_schema(X,Y,...) \
    enum_value_v(X,Y, NONE,           0) \
    enum_value_v(X,Y, ARRAY_BUFFER,   34962) \
    enum_value_v(X,Y, ELEMENT_BUFFER, 34963)
declare_enum(TargetType)


#define Mode_schema(X,Y,...) \
    enum_value_v(X,Y, NONE,           0) \
    enum_value_v(X,Y, LINES,          1) \
    enum_value_v(X,Y, LINE_LOOP,      2) \
    enum_value_v(X,Y, TRIANGLES,      4) \
    enum_value_v(X,Y, TRIANGLE_STRIP, 5) \
    enum_value_v(X,Y, TRIANGLE_FAN,   6) \
    enum_value_v(X,Y, QUADS,          7)
declare_enum(Mode)


#define Interpolation_schema(X,Y,...) \
    enum_value_v(X,Y, LINEAR,         0) \
    enum_value_v(X,Y, STEP,           1) \
    enum_value_v(X,Y, CUBICSPLINE,    2)
declare_enum(Interpolation)


#define Sampler_schema(X,Y,...) \
    i_prop(X,Y, public, u64,            input) \
    i_prop(X,Y, public, u64,            output) \
    i_prop(X,Y, public, Interpolation,  interpolation)
#ifndef Sampler_intern
#define Sampler_intern
#endif
declare_class(Sampler)


#define ChannelTarget_schema(X,Y,...) \
    i_prop(X,Y, public, u64,            node) \
    i_prop(X,Y, public, string,         path)
#ifndef ChannelTarget_intern
#define ChannelTarget_intern
#endif
declare_class(ChannelTarget)


#define Channel_schema(X,Y,...) \
    i_prop(X,Y, public, u64,            sampler) \
    i_prop(X,Y, public, ChannelTarget,  target)
#ifndef Channel_intern
#define Channel_intern
#endif
declare_class(Channel)

/// type-safe container declarations; needed for proper json serialization
/// the Model is given in the definition, in .c file
/// this merely forms a type alias with an additional type_t slot used at meta[0]
/// meta types are merely types with an array of types filled at index


typedef struct _array_Sampler* array_Sampler;

#define Animation_schema(X,Y,...) \
    i_prop(X,Y, public, string,         name) \
    i_prop(X,Y, public, array_Sampler,  samplers)
#ifndef Animation_intern
#define Animation_intern
#endif
declare_class(Animation)


#define SparseInfo_schema(X, Y,...) \
    i_prop(X, Y, public, u64,           bufferView) \
    i_prop(X, Y, public, ComponentType, componentType)
#ifndef SparseInfo_intern
#define SparseInfo_intern
#endif
declare_class(SparseInfo)


#define Sparse_schema(X, Y,...) \
    i_prop(X, Y, public, u64, count) \
    i_prop(X, Y, public, SparseInfo,    indices) \
    i_prop(X, Y, public, SparseInfo,    values)
#ifndef Sparse_intern
#define Sparse_intern
#endif
declare_class(Sparse)


#define Accessor_schema(X, Y,...) \
    i_prop(X, Y, public, bool,          normalized) \
    i_prop(X, Y, public, u64,           bufferView) \
    i_prop(X, Y, public, ComponentType, componentType) \
    i_prop(X, Y, public, CompoundType,  type) \
    i_prop(X, Y, public, u64,           count) \
    i_prop(X, Y, public, vec3f,         min) \
    i_prop(X, Y, public, vec3f,         max) \
    i_prop(X, Y, public, Sparse,        sparse) \
    i_prop(X, Y, public, u64,           stride) \
    i_prop(X, Y, public, u64,           total_bytes) \
    i_method(X, Y, public, u64,         vcount) \
    i_method(X, Y, public, u64,         component_size) \
    i_method(X, Y, public, AType,       member_type) \
    i_override(X,Y, method, init)
#ifndef Accessor_intern
#define Accessor_intern
#endif
declare_class(Accessor)


#define BufferView_schema(X, Y,...) \
    i_prop(X, Y, public, u64, buffer) \
    i_prop(X, Y, public, u64, byteLength) \
    i_prop(X, Y, public, u64, byteOffset) \
    i_prop(X, Y, public, TargetType, target)
#ifndef BufferView_intern
#define BufferView_intern
#endif
declare_class(BufferView)

typedef struct _array_Transform* array_Transform;

#define Skin_schema(X, Y,...) \
    i_prop(X, Y, public, string, name) \
    i_prop(X, Y, public, vector_i64, joints) \
    i_prop(X, Y, public, i32,    inverseBindMatrices) \
    i_prop(X, Y, public, object, extras) \
    i_prop(X, Y, public, object, extensions)
#ifndef Skin_intern
#define Skin_intern
#endif
declare_class(Skin)


#define JData_schema(X, Y,...) \
    i_prop(X, Y, public, vector_mat4f,      states) \
    i_prop(X, Y, public, array_Transform,   transforms) \
    i_prop(X, Y, public, mat4f,             local)
#ifndef JData_intern
#define JData_intern
#endif
declare_class(JData)



#define Transform_schema(X, Y,...) \
    i_prop(X, Y, public, JData,             jdata) \
    i_prop(X, Y, public, i32,               istate) \
    i_prop(X, Y, public, mat4f,             local) \
    i_prop(X, Y, public, mat4f,             local_default) \
    i_prop(X, Y, public, i32,               iparent) \
    i_prop(X, Y, public, vector_i64,        ichildren) \
    i_method(X, Y, public, none, multiply,  mat4f) \
    i_method(X, Y, public, none, set,       mat4f) \
    i_method(X, Y, public, none, set_default) \
    i_method(X, Y, public, none, propagate)
#ifndef Transform_intern
#define Transform_intern
#endif
declare_class(Transform)

typedef struct _Primitive* Primitive;
#define Node_schema(X, Y,...) \
    i_prop(X, Y, public, array,             fields) \
    i_prop(X, Y, public, string,            name) \
    i_prop(X, Y, public, Node,              parent) \
    i_prop(X, Y, public, i32,               skin) \
    i_prop(X, Y, public, i32,               mesh) \
    i_prop(X, Y, public, vec3f,             translation) \
    i_prop(X, Y, public, quatf,             rotation) \
    i_prop(X, Y, public, vec3f,             scale) \
    i_prop(X, Y, public, vector_f32,        weights) \
    i_prop(X, Y, public, vector_i64,        children) \
    i_prop(X, Y, public, i32,               joint_index) \
    i_prop(X, Y, public, bool,              processed) \
    i_prop(X, Y, public, object,            mx_joints) \
    i_method(X, Y, public, Primitive, primitive, Model, cstr)
#ifndef Node_intern
#define Node_intern
#endif
declare_class(Node)


/// models need names on their primitives
/// the json parser may error in this case (it doesnt, this is only used on init)
#define Primitive_schema(X, Y,...) \
    i_prop(X, Y, public, string,            name) \
    i_prop(X, Y, public, map,               attributes) \
    i_prop(X, Y, public, u64,               indices) \
    i_prop(X, Y, public, i32,               material) \
    i_prop(X, Y, public, Mode,              mode) \
    i_prop(X, Y, public, array_map,         targets)
#ifndef Primitive_intern
#define Primitive_intern
#endif
declare_class(Primitive)


#define MeshExtras_schema(X, Y,...) \
    i_prop(X, Y, public, array_string,      target_names)
#ifndef MeshExtras_intern
#define MeshExtras_intern
#endif
declare_class(MeshExtras)


typedef struct _array_Primitive* array_Primitive;

#define Mesh_schema(X, Y,...) \
    i_prop(X, Y, public, string,            name) \
    i_prop(X, Y, public, array_Primitive,   primitives) \
    i_prop(X, Y, public, vector_f32,        weights) \
    i_prop(X, Y, public, MeshExtras,        extras) \
    i_method(X, Y, public, Primitive, primitive, cstr)
#ifndef Mesh_intern
#define Mesh_intern
#endif
declare_class(Mesh)


#define Scene_schema(X, Y,...) \
    i_prop(X, Y, public, string,            name) \
    i_prop(X, Y, public, vector_i64,        nodes)
#ifndef Scene_intern
#define Scene_intern
#endif
declare_class(Scene)


#define AssetDesc_schema(X, Y,...) \
    i_prop(X, Y, public, string,            generator) \
    i_prop(X, Y, public, string,            copyright) \
    i_prop(X, Y, public, string,            version)
#ifndef AssetDesc_intern
#define AssetDesc_intern
#endif
declare_class(AssetDesc)


#define Buffer_schema(X, Y,...) \
    i_prop(X, Y, public, u64,               byteLength) \
    i_prop(X, Y, public, path,              uri) \
    i_prop(X, Y, public, vector,            data) \
    i_override(X, Y, method, init)
#ifndef Buffer_intern
#define Buffer_intern
#endif
declare_class(Buffer)

typedef struct _array_Node*          array_Node;
typedef struct _array_Skin*          array_Skin;
typedef struct _array_Accessor*      array_Accessor;
typedef struct _array_BufferView*    array_BufferView;
typedef struct _array_Mesh*          array_Mesh;
typedef struct _array_Buffer*        array_Buffer;
typedef struct _array_Animation*     array_Animation;
typedef struct _array_Scene*         array_Scene;
typedef struct _array_Material*      array_Material;

#define TextureInfo_schema(X, Y,...) \
    i_prop  (X, Y, public, i64, index) \
    i_prop  (X, Y, public, u32, texCoord) \
    i_prop  (X, Y, public, f32, scale)
#ifndef TextureInfo_intern
#define TextureInfo_intern
#endif
declare_class(TextureInfo)

/// we transfer material properties from here, in order to create small 2x2 placeholder textures
#define pbrMetallicRoughness_schema(X, Y,...) \
    /* Core PBR Properties */ \
    i_prop  (X, Y, public, vec4f,       baseColorFactor) \
    i_prop  (X, Y, public, TextureInfo, baseColorTexture) \
    i_prop  (X, Y, public, f32,         metallicFactor) \
    i_prop  (X, Y, public, f32,         roughnessFactor) \
    i_prop  (X, Y, public, TextureInfo, metallicRoughnessTexture) \
    i_prop  (X, Y, public, TextureInfo, normalTexture) \
    i_prop  (X, Y, public, TextureInfo, occlusionTexture) \
    i_prop  (X, Y, public, vec3f,       emissiveFactor) \
    i_prop  (X, Y, public, TextureInfo, emissiveTexture) \
    /* Specular Glossiness (KHR_materials_pbrSpecularGlossiness) */ \
    i_prop  (X, Y, public, vec4f,       diffuseFactor) \
    i_prop  (X, Y, public, vec3f,       specularFactor) \
    i_prop  (X, Y, public, f32,         glossinessFactor) \
    i_prop  (X, Y, public, TextureInfo, specularGlossinessTexture) \
    /* Sheen (KHR_materials_sheen) */ \
    i_prop  (X, Y, public, vec3f,       sheenColorFactor) \
    i_prop  (X, Y, public, TextureInfo, sheenColorTexture) \
    i_prop  (X, Y, public, f32,         sheenRoughnessFactor) \
    i_prop  (X, Y, public, TextureInfo, sheenRoughnessTexture) \
    /* Clear Coat (KHR_materials_clearcoat) */ \
    i_prop  (X, Y, public, f32,         clearcoatFactor) \
    i_prop  (X, Y, public, TextureInfo, clearcoatTexture) \
    i_prop  (X, Y, public, f32,         clearcoatRoughnessFactor) \
    i_prop  (X, Y, public, TextureInfo, clearcoatRoughnessTexture) \
    i_prop  (X, Y, public, TextureInfo, clearcoatNormalTexture) \
    /* Transmission (KHR_materials_transmission) */ \
    i_prop  (X, Y, public, f32,         transmissionFactor) \
    i_prop  (X, Y, public, TextureInfo, transmissionTexture) \
    /* Volume (KHR_materials_volume) */ \
    i_prop  (X, Y, public, f32,         thicknessFactor) \
    i_prop  (X, Y, public, TextureInfo, thicknessTexture) \
    i_prop  (X, Y, public, vec3f,       attenuationColor) \
    i_prop  (X, Y, public, f32,         attenuationDistance) \
    /* Index of Refraction (KHR_materials_ior) */ \
    i_prop  (X, Y, public, f32,         ior) \
    /* Specular (KHR_materials_specular) */ \
    i_prop  (X, Y, public, TextureInfo, specularTexture) \
    i_prop  (X, Y, public, vec3f,       specularColorFactor) \
    i_prop  (X, Y, public, TextureInfo, specularColorTexture) \
    /* Emissive Strength (KHR_materials_emissive_strength) */ \
    i_prop  (X, Y, public, f32,         emissiveStrength) \
    /* Iridescence (KHR_materials_iridescence) */ \
    i_prop  (X, Y, public, f32,         iridescenceFactor) \
    i_prop  (X, Y, public, TextureInfo, iridescenceTexture) \
    i_prop  (X, Y, public, f32,         iridescenceIor) \
    i_prop  (X, Y, public, f32,         iridescenceThicknessMinimum) \
    i_prop  (X, Y, public, f32,         iridescenceThicknessMaximum)

#ifndef pbrMetallicRoughness_intern
#define pbrMetallicRoughness_intern
#endif
declare_class(pbrMetallicRoughness)

#define Material_schema(X, Y,...) \
    i_prop  (X, Y, public, string,      name) \
    i_prop  (X, Y, public, pbrMetallicRoughness, pbr, field, pbrMetallicRoughness) \
    i_prop  (X, Y, public, TextureInfo, normalTexture) \
    i_prop  (X, Y, public, TextureInfo, occlusionTexture) \
    i_prop  (X, Y, public, TextureInfo, emissiveTexture) \
    i_prop  (X, Y, public, vec3f,       emissiveFactor) \
    i_prop  (X, Y, public, string,      alphaMode) \
    i_prop  (X, Y, public, f32,         alphaCutoff) \
    i_prop  (X, Y, public, bool,        doubleSided)
#ifndef Material_intern
#define Material_intern
#endif
declare_class(Material)


#define Model_schema(X, Y,...) \
    i_prop  (X, Y, public, array_Node,      nodes) \
    i_prop  (X, Y, public, array_Skin,      skins) \
    i_prop  (X, Y, public, array_Accessor,  accessors) \
    i_prop  (X, Y, public, array_BufferView, bufferViews) \
    i_prop  (X, Y, public, array_Mesh,      meshes) \
    i_prop  (X, Y, public, array_Buffer,    buffers) \
    i_prop  (X, Y, public, array_Animation, animations) \
    i_prop  (X, Y, public, array_Scene,     scenes) \
    i_prop  (X, Y, public, array_Material,  materials) \
    i_prop  (X, Y, public, u64,             scene) \
    i_prop  (X, Y, public, AssetDesc,       asset) \
    i_method(X, Y, public, Transform,       node_transform, JData, mat4f, i32, Transform) \
    i_method(X, Y, public, Node,            find,     cstr) \
    i_method(X, Y, public, i32,             index_of, cstr) \
    i_index (X, Y, public, Node,            string) \
    i_method(X, Y, public, JData,           joints, Node)
#ifndef Model_intern
#define Model_intern
#endif
declare_class(Model)


#define Polygon_schema(X, Y,...) \
    enum_value_v(X, Y, undefined, 0) \
    enum_value_v(X, Y, tri, 1) \
    enum_value_v(X, Y, quad, 2) \
    enum_value_v(X, Y, wire, 3) \
    enum_value_v(X, Y, mixed, 4) \
    enum_value_v(X, Y, ngon, 5)
declare_enum(Polygon)


#define Asset_schema(X, Y,...) \
    enum_value_v(X, Y, undefined, 0) \
    enum_value_v(X, Y, color, 1) \
    enum_value_v(X, Y, normal, 2) \
    enum_value_v(X, Y, material, 3) \
    enum_value_v(X, Y, reflect, 4) \
    enum_value_v(X, Y, env, 5) \
    enum_value_v(X, Y, attachment, 6) \
    enum_value_v(X, Y, depth_stencil, 7) \
    enum_value_v(X, Y, multisample, 8)
declare_enum(Asset)


#define Sampling_schema(X, Y,...) \
    enum_value_v(X, Y, undefined, 0) \
    enum_value_v(X, Y, nearest, 1) \
    enum_value_v(X, Y, linear, 2) \
    enum_value_v(X, Y, ansio, 3)
declare_enum(Sampling)


/// this is an example Vertex I used prior, in C++ code and then converted to C
/// we want to design a vertex for hinge.gltf
#define HumanVertex_schema(X, Y,...) \
    i_prop(X, Y, public, vec3f, pos)         \
    i_prop(X, Y, public, vec3f, normal)      \
    i_prop(X, Y, public, vec2f, uv0)         \
    i_prop(X, Y, public, vec2f, uv1)         \
    i_prop(X, Y, public, vec3f, tangent)     \
    i_prop(X, Y, public, vec3f, joints0)     \
    i_prop(X, Y, public, vec3f, joints1)     \
    i_prop(X, Y, public, vec3f, weights0)    \
    i_prop(X, Y, public, vec3f, weights1)
#ifndef HumanVertex_intern
#define HumanVertex_intern
#endif
declare_struct(HumanVertex)


/*
#define Transform_schema(X,Y,...)
#define Sampler_schema(X,Y,...)
#define Channel_schema(X,Y,...)
#define Primitive_schema(X,Y,...)
#define Node_schema(X,Y,...)
#define Skin_schema(X,Y,...)
#define Accessor_schema(X,Y,...)
#define BufferView_schema(X,Y,...)
#define Mesh_schema(X,Y,...)
#define Scene_schema(X,Y,...)
#define Material_schema(X,Y,...)
#define Buffer_schema(X,Y,...)
#define Animation_schema(X,Y,...)
*/

#define array_Transform_schema(X,Y,...)
#define array_Sampler_schema(X,Y,...)
#define array_Channel_schema(X,Y,...)
#define array_Primitive_schema(X,Y,...)
#define array_Node_schema(X,Y,...)
#define array_Skin_schema(X,Y,...)
#define array_Accessor_schema(X,Y,...)
#define array_BufferView_schema(X,Y,...)
#define array_Mesh_schema(X,Y,...)
#define array_Scene_schema(X,Y,...)
#define array_Material_schema(X,Y,...)
#define array_Buffer_schema(X,Y,...)
#define array_Animation_schema(X,Y,...)

declare_meta(array_Transform,  array, Transform)
declare_meta(array_Sampler,    array, Sampler)
declare_meta(array_Channel,    array, Channel)
declare_meta(array_Primitive,  array, Primitive)
declare_meta(array_Node,       array, Node)
declare_meta(array_Skin,       array, Skin)
declare_meta(array_Accessor,   array, Accessor)
declare_meta(array_BufferView, array, BufferView)
declare_meta(array_Mesh,       array, Mesh)
declare_meta(array_Scene,      array, Scene)
declare_meta(array_Material,   array, Material)
declare_meta(array_Buffer,     array, Buffer)
declare_meta(array_Animation,  array, Animation)

#endif