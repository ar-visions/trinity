#ifndef _TRINITY_
#define _TRINITY_

#include <A>
#include <vec>
#include <gltf-public>

typedef void* skia_t;
typedef void* handle_t;

skia_t skia_init_vk(handle_t vk_instance, handle_t phys, handle_t device, handle_t queue, unsigned int graphics_family, unsigned int vk_version);


#define Key_schema(X, YY) \
    enum_value_v(X, YY, Undefined,      0) \
    enum_value_v(X, YY, Space,         32) \
    enum_value_v(X, YY, Apostrophe,    39) \
    enum_value_v(X, YY, Comma,         44) \
    enum_value_v(X, YY, Minus,         45) \
    enum_value_v(X, YY, Period,        46) \
    enum_value_v(X, YY, Slash,         47) \
    enum_value_v(X, YY, K0,            48) \
    enum_value_v(X, YY, K1,            49) \
    enum_value_v(X, YY, K2,            50) \
    enum_value_v(X, YY, K3,            51) \
    enum_value_v(X, YY, K4,            52) \
    enum_value_v(X, YY, K5,            53) \
    enum_value_v(X, YY, K6,            54) \
    enum_value_v(X, YY, K7,            55) \
    enum_value_v(X, YY, K8,            56) \
    enum_value_v(X, YY, K9,            57) \
    enum_value_v(X, YY, SemiColon,     59) \
    enum_value_v(X, YY, Equal,         61) \
    enum_value_v(X, YY, A,             65) \
    enum_value_v(X, YY, B,             66) \
    enum_value_v(X, YY, C,             67) \
    enum_value_v(X, YY, D,             68) \
    enum_value_v(X, YY, E,             69) \
    enum_value_v(X, YY, F,             70) \
    enum_value_v(X, YY, G,             71) \
    enum_value_v(X, YY, H,             72) \
    enum_value_v(X, YY, I,             73) \
    enum_value_v(X, YY, J,             74) \
    enum_value_v(X, YY, K,             75) \
    enum_value_v(X, YY, L,             76) \
    enum_value_v(X, YY, M,             77) \
    enum_value_v(X, YY, N,             78) \
    enum_value_v(X, YY, O,             79) \
    enum_value_v(X, YY, P,             80) \
    enum_value_v(X, YY, Q,             81) \
    enum_value_v(X, YY, R,             82) \
    enum_value_v(X, YY, S,             83) \
    enum_value_v(X, YY, T,             84) \
    enum_value_v(X, YY, U,             85) \
    enum_value_v(X, YY, V,             86) \
    enum_value_v(X, YY, W,             87) \
    enum_value_v(X, YY, X,             88) \
    enum_value_v(X, YY, Y,             89) \
    enum_value_v(X, YY, Z,             90) \
    enum_value_v(X, YY, LeftBracket,   91) \
    enum_value_v(X, YY, BackSlash,     92) \
    enum_value_v(X, YY, RightBracket,  93) \
    enum_value_v(X, YY, GraveAccent,   96) \
    enum_value_v(X, YY, World1,       161) \
    enum_value_v(X, YY, World2,       162) \
    enum_value_v(X, YY, Escape,       256) \
    enum_value_v(X, YY, Enter,        257) \
    enum_value_v(X, YY, Tab,          258) \
    enum_value_v(X, YY, Backspace,    259) \
    enum_value_v(X, YY, Insert,       260) \
    enum_value_v(X, YY, Delete,       261) \
    enum_value_v(X, YY, Right,        262) \
    enum_value_v(X, YY, Left,         263) \
    enum_value_v(X, YY, Down,         264) \
    enum_value_v(X, YY, Up,           265) \
    enum_value_v(X, YY, PageUp,       266) \
    enum_value_v(X, YY, PageDown,     267) \
    enum_value_v(X, YY, Home,         268) \
    enum_value_v(X, YY, End,          269) \
    enum_value_v(X, YY, CapsLock,     280) \
    enum_value_v(X, YY, ScrollLock,   281) \
    enum_value_v(X, YY, NumLock,      282) \
    enum_value_v(X, YY, PrintScreen,  283) \
    enum_value_v(X, YY, Pause,        284) \
    enum_value_v(X, YY, F1,           290) \
    enum_value_v(X, YY, F2,           291) \
    enum_value_v(X, YY, F3,           292) \
    enum_value_v(X, YY, F4,           293) \
    enum_value_v(X, YY, F5,           294) \
    enum_value_v(X, YY, F6,           295) \
    enum_value_v(X, YY, F7,           296) \
    enum_value_v(X, YY, F8,           297) \
    enum_value_v(X, YY, F9,           298) \
    enum_value_v(X, YY, F10,          299) \
    enum_value_v(X, YY, F11,          300) \
    enum_value_v(X, YY, F12,          301) \
    enum_value_v(X, YY, F13,          302) \
    enum_value_v(X, YY, F14,          303) \
    enum_value_v(X, YY, F15,          304) \
    enum_value_v(X, YY, F16,          305) \
    enum_value_v(X, YY, F17,          306) \
    enum_value_v(X, YY, F18,          307) \
    enum_value_v(X, YY, F19,          308) \
    enum_value_v(X, YY, F20,          309) \
    enum_value_v(X, YY, F21,          310) \
    enum_value_v(X, YY, F22,          311) \
    enum_value_v(X, YY, F23,          312) \
    enum_value_v(X, YY, F24,          313) \
    enum_value_v(X, YY, F25,          314) \
    enum_value_v(X, YY, Kp0,          320) \
    enum_value_v(X, YY, Kp1,          321) \
    enum_value_v(X, YY, Kp2,          322) \
    enum_value_v(X, YY, Kp3,          323) \
    enum_value_v(X, YY, Kp4,          324) \
    enum_value_v(X, YY, Kp5,          325) \
    enum_value_v(X, YY, Kp6,          326) \
    enum_value_v(X, YY, Kp7,          327) \
    enum_value_v(X, YY, Kp8,          328) \
    enum_value_v(X, YY, Kp9,          329) \
    enum_value_v(X, YY, KpDecimal,    330) \
    enum_value_v(X, YY, KpDivide,     331) \
    enum_value_v(X, YY, KpMultiply,   332) \
    enum_value_v(X, YY, KpSubtract,   333) \
    enum_value_v(X, YY, KpAdd,        334) \
    enum_value_v(X, YY, KpEnter,      335) \
    enum_value_v(X, YY, KpEqual,      336) \
    enum_value_v(X, YY, LeftShift,    340) \
    enum_value_v(X, YY, LeftControl,  341) \
    enum_value_v(X, YY, LeftAlt,      342) \
    enum_value_v(X, YY, LeftSuper,    343) \
    enum_value_v(X, YY, RightShift,   344) \
    enum_value_v(X, YY, RightControl, 345) \
    enum_value_v(X, YY, RightAlt,     346) \
    enum_value_v(X, YY, RightSuper,   347) \
    enum_value_v(X, YY, Menu,         348)
declare_enum(Key)

/*

A.png → Base Color
R.png → Roughness
M.png → Metalness
N.png → Normal Map
H.png → Height/Parallax
O.png → Ambient Occlusion
S.png → Specular
E.png → Emission
C.png → Clearcoat
T.png → Transmission

*/

/// object("string") creates a string
/// object(1) creates a primitive i64
/// object(1.2f) creates a primitive f32
/// object(1.2) creates f64

declare_sentry(Zero);
declare_sentry(One);
declare_sentry(Two);
declare_sentry(Three);
declare_sentry(Four);

typedef struct _pipeline* pipeline;
typedef struct _gpu* gpu;
#define Surface_schema(X,Y,...) \
    enum_value_v_2(X,Y, none,           0, Zero) \
    enum_value_v_2(X,Y, color,          1, Four) \
    enum_value_v_2(X,Y, normal,         2, Four) \
    enum_value_v_2(X,Y, emission,       3, Four) \
    enum_value_v_2(X,Y, rough,          4, One) \
    enum_value_v_2(X,Y, metal,          5, One) \
    enum_value_v_2(X,Y, height,         6, One) \
    enum_value_v_2(X,Y, ao,             7, One) \
    enum_value_v_2(X,Y, ior,            8, One) \
    enum_value_v_2(X,Y, environment,    9, Four) \
    enum_method(X,Y, gpu, resource, pipeline)
declare_enum(Surface)

#define Pixel_schema(X,Y,...) \
    enum_value_v(X,Y, none,            0) \
    enum_value_v(X,Y, rgba8,           1) \
    enum_value_v(X,Y, rgb8,            2) \
    enum_value_v(X,Y, rgbf32,          3) \
    enum_value_v(X,Y, u8,              4) \
    enum_value_v(X,Y, rgbaf32,         5) \
    enum_value_v(X,Y, f32,             6)
declare_enum(Pixel)

// a good idea is to make this more of 'ANY' ability of filter
// if filter set to an object, that object could dictate more filter arguments for a general purpose filter
// this is something used by the system
#define Filter_schema(X,Y,...) \
    enum_value_v(X,Y, none,            0) \
    enum_value_v(X,Y, nearest,         1) \
    enum_value_v(X,Y, bilinear,        3) \
    enum_value_v(X,Y, trilinear,       4) \
    enum_value_v(X,Y, low,             5) \
    enum_value_v(X,Y, med,             6) \
    enum_value_v(X,Y, high,            7)
declare_enum(Filter)

typedef struct _pipeline* pipeline;
typedef struct _shader*   shader;
typedef struct _texture*  texture;
typedef struct _image*    image;
#define trinity_schema(X,Y,...) \
    i_prop    (X,Y, intern,     VkInstance,          instance,        as, ARef) \
    i_prop    (X,Y, intern,     i64,                 msaa_samples) \
    i_prop    (X,Y, intern,     VkPhysicalDevice,    physical_device, as, ARef) \
    i_prop    (X,Y, intern,     VkDevice,            device,          as, ARef) \
    i_prop    (X,Y, intern,     VkQueue,             queue,           as, ARef) \
    i_prop    (X,Y, intern,     VkDebugUtilsMessengerEXT, debug,      as, ARef) \
    i_prop    (X,Y, intern,     VkCommandPool,       command_pool,    as, ARef) \
    i_prop    (X,Y, public,     i32,                 queue_family_index) \
    i_prop    (X,Y, intern,     map,                 device_memory) \
    i_prop    (X,Y, intern,     handle,              skia) \
    i_prop    (X,Y, public,     bool,                rt_support) \
    i_method  (X,Y, public,     texture,             environment, image, vec3f, f32) \
    i_override(X,Y, method,     init, dealloc)
declare_class(trinity)

#define uniforms_schema(X,Y,...) \
    i_prop    (X,Y, required,   trinity,            t) \
    i_prop    (X,Y, required,   shader,             s) \
    i_prop    (X,Y, intern,     array,              u_memory) \
    i_prop    (X,Y, intern,     array,              u_buffers) \
    i_method  (X,Y, public,     none,      update) \
    i_override(X,Y, method,     init)
declare_class(uniforms)

typedef struct _shader* shader;
typedef none(*u_callback)(pipeline, object);

#define shader_schema(X,Y,...) \
    i_prop    (X,Y, public,     trinity,            t) \
    i_prop    (X,Y, public,     string,             name) \
    i_prop    (X,Y, public,     string,             vert)  \
    i_prop    (X,Y, public,     string,             frag)  \
    i_prop    (X,Y, public,     string,             comp)  \
    i_prop    (X,Y, intern,     VkShaderModule,     vk_vert, as, ARef) \
    i_prop    (X,Y, intern,     VkShaderModule,     vk_frag, as, ARef) \
    i_prop    (X,Y, intern,     VkShaderModule,     vk_comp, as, ARef) \
    i_override(X,Y, method,     init, dealloc)
declare_class(shader)

 #define Basic_schema(X,Y,...) \
    i_prop   (X,Y, public,     mat4f, proj) \
    i_prop   (X,Y, public,     mat4f, model) \
    i_prop   (X,Y, public,     mat4f, view) \
    i_attr   (X,Y, Surface,    color,  rgbaf)
declare_mod(Basic, shader)


#define IBL_schema(X,Y,...)
declare_class(IBL)

/// attribute is a type, and a value; name is baked into enumerables
#define PBR_schema(X,Y,...) \
    i_prop   (X,Y, public,     vec4f,   pos) \
    i_prop   (X,Y, public,     vec4f,   dir) \
    i_prop   (X,Y, public,     mat4f,   model) \
    i_prop   (X,Y, public,     mat4f,   view) \
    i_prop   (X,Y, public,     mat4f,   proj) \
    i_attr   (X,Y, Surface,    color,         rgba8) \
    i_attr   (X,Y, Surface,    normal,        rgba8) \
    i_attr   (X,Y, Surface,    emission,      rgbaf) \
    i_attr   (X,Y, Surface,    rough,         u8) \
    i_attr   (X,Y, Surface,    metal,         u8) \
    i_attr   (X,Y, Surface,    height,        f32) \
    i_attr   (X,Y, Surface,    ao,            u8) \
    i_attr   (X,Y, Surface,    ior,           f32) \
    i_attr   (X,Y, Surface,    environment,   rgbaf, IBL) \
    i_override(X,Y, method, init)
declare_mod(PBR, shader)

#define Env_schema(X,Y,...) \
    i_prop   (X,Y, public,     mat4f, view) \
    i_prop   (X,Y, public,     mat4f, proj) \
    i_prop   (X,Y, public,     vec2f, roughness_samples) \
    i_attr   (X,Y, Surface,    color,  rgbaf) \
    i_override(X,Y, method, init)
declare_mod(Env, shader)

#define Convolve_schema(X,Y,...) \
    i_prop   (X,Y, public,     mat4f, env) \
    i_prop   (X,Y, public,     mat4f, view) \
    i_prop   (X,Y, public,     mat4f, proj) \
    i_prop   (X,Y, public,     vec2f, roughness_samples) \
    i_attr   (X,Y, Surface,    environment,  rgbaf)
declare_mod(Convolve, shader)

typedef struct _pipeline* pipeline;
typedef struct _model*    model;
typedef struct _window*   window;

#define buffer_schema(X,Y,...) \
    i_prop    (X,Y, required,   trinity,            t) \
    i_prop    (X,Y, required,   i64,                size) \
    i_prop    (X,Y, public,     ARef,               data) \
    i_prop    (X,Y, public,     bool,               u_src) \
    i_prop    (X,Y, public,     bool,               u_dst) \
    i_prop    (X,Y, public,     bool,               u_shader) \
    i_prop    (X,Y, public,     bool,               u_uniform) \
    i_prop    (X,Y, public,     bool,               u_vertex) \
    i_prop    (X,Y, public,     bool,               u_index) \
    i_prop    (X,Y, public,     bool,               u_storage) \
    i_prop    (X,Y, public,     bool,               m_device_local) \
    i_prop    (X,Y, public,     bool,               m_host_visible) \
    i_prop    (X,Y, public,     bool,               m_host_coherent) \
    i_prop    (X,Y, intern,     ARef,               user) \
    i_prop    (X,Y, intern,     VkDeviceMemory,     vk_memory, as, ARef) \
    i_prop    (X,Y, intern,     VkBuffer,           vk_buffer, as, ARef) \
    i_method  (X,Y, public,     none,               update, ARef) \
    i_method  (X,Y, public,     none,               transfer, window) \
    i_method  (X,Y, public,     ARef,               mmap) \
    i_method  (X,Y, public,     none,               unmap) \
    i_override(X,Y, method,     init, dealloc)
declare_class(buffer)


#define window_schema(X,Y,...) \
    i_prop    (X,Y, intern,     handle,                 window) \
    i_prop    (X,Y, intern,     VkSurfaceKHR,           surface,        as, ARef) \
    i_prop    (X,Y, intern,     VkSwapchainKHR,         swapchain,        as, ARef) \
    i_prop    (X,Y, intern,     array,                  models) \
    i_prop    (X,Y, intern,     VkSurfaceCapabilitiesKHR*, surface_caps,        as, ARef) \
    i_prop    (X,Y, intern,     VkSurfaceFormatKHR,     surface_format,        as, i64) \
    i_prop    (X,Y, intern,     VkPresentModeKHR,       present_mode,          as, i32) \
    i_prop    (X,Y, intern,     VkExtent2D,             extent,                as, i64) \
    i_prop    (X,Y, intern,     VkRenderPass,           render_pass,           as, ARef) \
    i_prop    (X,Y, intern,     VkFramebuffer*,         framebuffers,          as, ARef) \
    i_prop    (X,Y, intern,     VkImage*,               depth_images,          as, ARef) \
    i_prop    (X,Y, intern,     VkImageView*,           depth_image_views,     as, ARef) \
    i_prop    (X,Y, intern,     VkDeviceMemory*,        depth_image_memory,    as, ARef) \
    i_prop    (X,Y, intern,     VkImage,                resolve_image,         as, ARef) \
    i_prop    (X,Y, intern,     VkImageView,            resolve_view,          as, ARef) \
    i_prop    (X,Y, intern,     VkDeviceMemory,         resolve_memory,        as, ARef) \
    i_prop    (X,Y, intern,     VkImage,                color_image,           as, ARef) \
    i_prop    (X,Y, intern,     VkImageView,            color_view,            as, ARef) \
    i_prop    (X,Y, intern,     VkDeviceMemory,         color_memory,          as, ARef) \
    i_prop    (X,Y, intern,     u32,                    image_count) \
    i_prop    (X,Y, intern,     VkFence*,               command_fences,        as, ARef) \
    i_prop    (X,Y, intern,     VkCommandBuffer*,       command_buffers,       as, ARef) \
    i_prop    (X,Y, intern,     VkSemaphore*,           image_available_semaphore, as, ARef) \
    i_prop    (X,Y, intern,     VkSemaphore*,           render_finished_semaphore, as, ARef) \
    i_prop    (X,Y, intern,     VkFence,                in_flight_fence,      as, ARef) \
    i_prop    (X,Y, intern,     ARef,                   loop_callback) \
    i_prop    (X,Y, intern,     ARef,                   loop_arg) \
    i_prop    (X,Y, intern,     i32,                    semaphore_frame) \
    i_prop    (X,Y, intern,     i32,                    last_fence) \
    i_prop    (X,Y, required,   trinity,                t) \
    i_prop    (X,Y, required,   u32,                    width) \
    i_prop    (X,Y, required,   u32,                    height) \
    i_prop    (X,Y, public,     Pixel,                  format) \
    i_prop    (X,Y, public,     string,                 title) \
    i_prop    (X,Y, public,     f32,                    debug_value) \
    i_prop    (X,Y, public,     bool,                   backbuffer) \
    i_method  (X,Y, public,     none,                   process, array, object, object) \
    i_method  (X,Y, public,     none,                   resize, i32, i32) \
    i_method  (X,Y, public,     i32,                    loop, ARef, ARef) \
    i_method  (X,Y, public,     none,                   push, model) \
    i_cast    (X,Y, public,     image) \
    i_override(X,Y, method,     init, dealloc)
declare_class(window)


#define image_schema(X,Y,...) \
    i_ctr (X,Y, public, string) \
    i_ctr (X,Y, public, symbol) \
    i_ctr (X,Y, public, cstr) \
    i_prop    (X,Y, public,     path,                   uri) \
    i_prop    (X,Y, public,     Surface,                surface) \
    i_prop    (X,Y, public,     Pixel,                  format) \
    i_prop    (X,Y, public,     i32,                    pixel_size) \
    i_prop    (X,Y, public,     i32,                    width) \
    i_prop    (X,Y, public,     i32,                    height) \
    i_prop    (X,Y, public,     i32,                    channels) \
    i_prop    (X,Y, public,     object,                 source) \
    i_prop    (X,Y, public,     Filter,                 filter) \
    i_prop    (X,Y, public,     object,                 user) \
    i_method  (X,Y, public,     image,                  gaussian, f32) \
    i_method  (X,Y, public,     image,                  resize, i32, i32) \
    i_method  (X,Y, public,     i32,                    png, path) \
    i_method  (X,Y, public,     i32,                    exr, path) \
    i_method  (X,Y, public,     i64,                    byte_count) \
    i_method  (X,Y, public,     i64,                    len) \
    i_method  (X,Y, public,     object,                 get, num) \
    i_override(X,Y, method,     init, dealloc) \
    i_override(X,Y, method,     copy)
declare_class(image)

forward(texture)

#define join_schema(X,Y,...) \
    enum_value_v(X, Y, none,       0) \
    enum_value_v(X, Y, miter,      1) \
    enum_value_v(X, Y, round,      2) \
    enum_value_v(X, Y, bevel,      3)
declare_enum(join)


#define cap_schema(X,Y,...) \
    enum_value_v(X, Y, none,       0) \
    enum_value_v(X, Y, round,      1) \
    enum_value_v(X, Y, square,     2)
declare_enum(cap)


#define stroke_schema(X,Y,...) \
    i_prop    (X,Y, public,   f32,     width) \
    i_prop    (X,Y, public,   cap,     cap) \
    i_prop    (X,Y, public,   join,    join) \
    i_prop    (X,Y, public,   f32,     miter_limit) \
    i_prop    (X,Y, public,   f32,     dash_offset)
declare_class(stroke)


#define font_schema(X,Y,...) \
    i_prop    (X,Y, public,   path,    path) \
    i_prop    (X,Y, public,   f32,     size)
declare_class(font)


#define draw_state_schema(X,Y,...) \
    i_prop    (X,Y, intern,   stroke,  stroke) \
    i_prop    (X,Y, intern,   font,    font) \
    i_prop    (X,Y, intern,   u32,     fill_color) \
    i_prop    (X,Y, intern,   u32,     stroke_color) \
    i_method  (X,Y, public,   none,    set_default)
declare_class(draw_state)

struct SkPath;
#define canvas_schema(X,Y,...) \
    i_prop    (X,Y, required, trinity, t) \
    i_prop    (X,Y, intern,   texture, tx) \
    i_prop    (X,Y, intern,   ARef,    sk_context) \
    i_prop    (X,Y, intern,   ARef,    sk_surface) \
    i_prop    (X,Y, intern,   ARef,    sk_canvas) \
    i_prop    (X,Y, intern,   ARef,    sk_path) \
    i_prop    (X,Y, intern,   array,   state, of, draw_state) \
    i_method  (X,Y, public,   none,    save) \
    i_method  (X,Y, public,   none,    restore) \
    i_method  (X,Y, public,   none,    move_to,     f32, f32) \
    i_method  (X,Y, public,   none,    line_to,     f32, f32) \
    i_method  (X,Y, public,   none,    arc_to,      f32, f32, f32, f32, f32) \
    i_method  (X,Y, public,   none,    arc,         f32, f32, f32, f32, f32) \
    i_method  (X,Y, public,   none,    rect,        f32, f32, f32, f32) \
    i_method  (X,Y, public,   none,    fill_color,  object) \
    i_method  (X,Y, public,   none,    stroke_color, object) \
    i_method  (X,Y, public,   none,    clear,       object) \
    i_method  (X,Y, public,   none,    set_stroke,  stroke) \
    i_method  (X,Y, public,   none,    set_font,    font) \
    i_method  (X,Y, public,   none,    cubic,       f32, f32, f32, f32, f32, f32) \
    i_method  (X,Y, public,   none,    quadratic,   f32, f32, f32, f32) \
    i_method  (X,Y, public,   none,    draw_fill,   bool) \
    i_method  (X,Y, public,   none,    draw_stroke, bool) \
    i_method  (X,Y, public,   none,    sync) \
    i_override(X,Y, method,   init,    dealloc)
declare_mod(canvas, image)


#define command_schema(X,Y,...) \
    i_prop(X,Y, required, trinity, t) \
    i_prop(X,Y, intern,   VkCommandBuffer,  vk, as, ARef) \
    i_method  (X,Y, public, none, begin) \
    i_method  (X,Y, public, none, submit) \
    i_override(X,Y, method, init, dealloc)
declare_class(command)


#define texture_schema(X,Y,...) \
    i_prop(X,Y, required, trinity,          t) \
    i_prop(X,Y, public,   canvas,           canvas) \
    i_prop(X,Y, public,   Pixel,            format) \
    i_prop(X,Y, public,   object,           sampler) \
    i_prop(X,Y, public,   i32,              width) \
    i_prop(X,Y, public,   i32,              height) \
    i_prop(X,Y, public,   i32,              mip_levels) \
    i_prop(X,Y, public,   i32,              layer_count) \
    i_prop(X,Y, public,   Surface,          surface) \
    i_prop(X,Y, intern,   VkFormat,         vk_format,      as, i32) \
    i_prop(X,Y, intern,   VkImage,          vk_image,       as, ARef) \
    i_prop(X,Y, intern,   VkImageView,      vk_image_view,  as, ARef) \
    i_prop(X,Y, intern,   VkSampler,        vk_sampler,     as, ARef) \
    i_prop(X,Y, intern,   VkDeviceMemory,   vk_memory,      as, ARef) \
    i_override(X,Y, method, init, dealloc)
declare_class(texture)

typedef struct _Accessor* Accessor;
typedef struct vertex_member_t {
    AType    type;
    Accessor ac;
    i64      size;
    i64      offset;
} vertex_member_t;

#define gpu_schema(X,Y,...) \
    i_prop(X,Y, required, trinity,      t) \
    i_prop(X,Y, required, cstr,         name) \
    i_prop(X,Y, public,   image,        sampler) \
    i_prop(X,Y, intern,   texture,      tx) \
    i_prop(X,Y, public,   object,       vertex_data) \
    i_prop(X,Y, public,   object,       index_data) \
    i_vprop(X,Y, public,  vertex_member_t, members) \
    i_prop(X,Y, public,   i32,          member_count) \
    i_prop(X,Y, public,   i32,          index_size) \
    i_prop(X,Y, public,   i32,          index_count) \
    i_prop(X,Y, public,   i32,          vertex_size) \
    i_prop(X,Y, public,   i32,          vertex_count) \
    i_prop(X,Y, intern,   buffer,       vertex) \
    i_prop(X,Y, intern,   buffer,       index) \
    i_prop(X,Y, intern,   VkImage,      vk_image,       as, ARef) \
    i_prop(X,Y, intern,   VkImageView,  vk_image_view,  as, ARef) \
    i_prop(X,Y, intern,   VkSampler,    vk_sampler,     as, ARef) \
    i_prop(X,Y, intern,   VkDeviceMemory, vk_memory,    as, ARef) \
    i_prop(X,Y, public,   bool,         compute) \
    i_method(X,Y, public, none,         sync, window) \
    i_override(X,Y, method, init, dealloc)
declare_class(gpu)

/// shader is an array
///
typedef struct _Material* Material;
#define pipeline_schema(X,Y,...) \
    i_prop    (X,Y, required,   trinity,                t) \
    i_prop    (X,Y, required,   window,                 w) \
    i_prop    (X,Y, public,     mat4f,                  model) \
    i_prop    (X,Y, public,     Material,               material) \
    i_prop    (X,Y, public,     array,                  samplers) \
    i_prop    (X,Y, required,   shader,                 s) \
    i_prop    (X,Y, intern,     array,                  resources) \
    i_prop    (X,Y, intern,     uniforms,               shader_uniforms) \
    i_prop    (X,Y, intern,     gpu,                    vbo) \
    i_prop    (X,Y, intern,     gpu,                    memory) \
    i_array   (X,Y, intern,     VkDescriptorSetLayout,  2, descriptor_layouts) \
    i_prop    (X,Y, intern,     VkDescriptorPool,       descriptor_pool,    as, ARef) \
    i_prop    (X,Y, intern,     VkDescriptorSet,        bind,               as, ARef) \
    i_prop    (X,Y, intern,     VkPipeline,             vk_render,          as, ARef) \
    i_prop    (X,Y, intern,     VkPipeline,             vk_compute,         as, ARef) \
    i_prop    (X,Y, intern,     VkPipelineLayout,       layout,             as, ARef) \
    i_array   (X,Y, intern,     VkDescriptorSet, 2,     descriptor_sets) \
    i_method  (X,Y, public,     none, render,           handle) \
    i_method  (X,Y, public,     none, bind_resources) \
    i_override(X,Y, method,     init, dealloc)
declare_class(pipeline)

/// will handle different texture overrides and uniforms
/// name must match a Mesh in glTF data
typedef struct _Primitive* Primitive;
#define part_schema(X,Y,...) \
    i_prop    (X,Y, required, Primitive, id) \
    i_prop    (X,Y, public  , shader, s)
declare_class(part)

// we definitely want to allow for a null parts, which will render the entire node with the default shader!
typedef struct _Node* Node;
#define node_schema(X,Y,...) \
    i_prop    (X,Y, public,   Node,   id) \
    i_prop    (X,Y, public,   array,  parts)
declare_class(node)

#define node_default null

typedef struct _Model* Model;
#define model_schema(X,Y,...) \
    i_prop    (X,Y, required, trinity, t) \
    i_prop    (X,Y, required, window,  w) \
    i_prop    (X,Y, required, Model,   id) \
    i_prop    (X,Y, public,   array,   nodes) \
    i_prop    (X,Y, public,   shader,  s) \
    i_prop    (X,Y, public,   array,   samplers) \
    i_prop    (X,Y, intern,   array,   pipelines) \
    i_override(X,Y, method, init, dealloc)
declare_class(model)

#define particle_schema(X,Y,...) \
    i_inlay(X,Y, public, vec2f,  pos) \
    i_inlay(X,Y, public, vec2f,  velocity) \
    i_prop(X,Y,  public, f32,    density) \
    i_prop(X,Y,  public, f32,    pressure)
declare_class(particle)

#endif