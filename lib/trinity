#ifndef _TRINITY_
#define _TRINITY_

#include <A>
#include <vec-public>
#include <vec>
#include <gltf-public>
#include <img-intern>
#include <img>

typedef void* skia_t;
typedef void* handle_t;

skia_t skia_init_vk(handle_t vk_instance, handle_t phys, handle_t device, handle_t queue, unsigned int graphics_family, unsigned int vk_version);

/*

A.png → Base Color
R.png → Roughness
M.png → Metalness
N.png → Normal Map
H.png → Height/Parallax
O.png → Ambient Occlusion
S.png → Specular
E.png → Emission
C.png → Clearcoat
T.png → Transmission

*/

/// object("string") creates a string
/// object(1) creates a primitive i64
/// object(1.2f) creates a primitive f32
/// object(1.2) creates f64

declare_sentry(Zero);
declare_sentry(One);
declare_sentry(Two);
declare_sentry(Three);
declare_sentry(Four);

typedef struct _pipeline* pipeline;
typedef struct _gpu* gpu;

typedef struct _pipeline* pipeline;
typedef struct _shader*   shader;
typedef struct _texture*  texture;
typedef struct _image*    image;
#define trinity_schema(X,Y,...) \
    i_prop    (X,Y, intern,     VkInstance,          instance,        as, ARef) \
    i_prop    (X,Y, intern,     i64,                 msaa_samples) \
    i_prop    (X,Y, intern,     VkPhysicalDevice,    physical_device, as, ARef) \
    i_prop    (X,Y, intern,     VkDevice,            device,          as, ARef) \
    i_prop    (X,Y, intern,     VkQueue,             queue,           as, ARef) \
    i_prop    (X,Y, intern,     VkDebugUtilsMessengerEXT, debug,      as, ARef) \
    i_prop    (X,Y, intern,     VkCommandPool,       command_pool,    as, ARef) \
    i_prop    (X,Y, public,     i32,                 queue_family_index) \
    i_prop    (X,Y, intern,     map,                 device_memory) \
    i_prop    (X,Y, public,     bool,                rt_support) \
    i_method  (X,Y, public,     texture,             environment, image, vec3f, f32) \
    i_override(X,Y, method,     init, dealloc)
declare_class(trinity)

#define uniforms_schema(X,Y,...) \
    i_prop    (X,Y, required,   trinity,            t) \
    i_prop    (X,Y, required,   shader,             s) \
    i_prop    (X,Y, intern,     array,              u_memory) \
    i_prop    (X,Y, intern,     array,              u_buffers) \
    i_method  (X,Y, public,     none,      update) \
    i_override(X,Y, method,     init)
declare_class(uniforms)

typedef struct _shader* shader;
typedef none(*u_callback)(pipeline, object);

#define shader_schema(X,Y,...) \
    i_prop    (X,Y, public,     trinity,            t) \
    i_prop    (X,Y, public,     string,             name) \
    i_prop    (X,Y, public,     string,             vert)  \
    i_prop    (X,Y, public,     string,             frag)  \
    i_prop    (X,Y, public,     string,             comp)  \
    i_prop    (X,Y, intern,     VkShaderModule,     vk_vert, as, ARef) \
    i_prop    (X,Y, intern,     VkShaderModule,     vk_frag, as, ARef) \
    i_prop    (X,Y, intern,     VkShaderModule,     vk_comp, as, ARef) \
    i_override(X,Y, method,     init, dealloc)
declare_class(shader)

 #define Basic_schema(X,Y,...) \
    i_prop   (X,Y, public,     mat4f, proj) \
    i_prop   (X,Y, public,     mat4f, model) \
    i_prop   (X,Y, public,     mat4f, view) \
    i_attr   (X,Y, Surface,    color,  rgbaf)
declare_mod(Basic, shader)


#define IBL_schema(X,Y,...)
declare_class(IBL)

/// attribute is a type, and a value; name is baked into enumerables
#define PBR_schema(X,Y,...) \
    i_prop   (X,Y, public,     vec4f,   pos) \
    i_prop   (X,Y, public,     vec4f,   dir) \
    i_prop   (X,Y, public,     mat4f,   model) \
    i_prop   (X,Y, public,     mat4f,   view) \
    i_prop   (X,Y, public,     mat4f,   proj) \
    i_attr   (X,Y, Surface,    color,         rgba8) \
    i_attr   (X,Y, Surface,    normal,        rgba8) \
    i_attr   (X,Y, Surface,    emission,      rgbaf) \
    i_attr   (X,Y, Surface,    rough,         u8) \
    i_attr   (X,Y, Surface,    metal,         u8) \
    i_attr   (X,Y, Surface,    height,        f32) \
    i_attr   (X,Y, Surface,    ao,            u8) \
    i_attr   (X,Y, Surface,    ior,           f32) \
    i_attr   (X,Y, Surface,    environment,   rgbaf, IBL) \
    i_override(X,Y, method, init)
declare_mod(PBR, shader)

#define Env_schema(X,Y,...) \
    i_prop   (X,Y, public,     mat4f, view) \
    i_prop   (X,Y, public,     mat4f, proj) \
    i_prop   (X,Y, public,     vec2f, roughness_samples) \
    i_attr   (X,Y, Surface,    color,  rgbaf) \
    i_override(X,Y, method, init)
declare_mod(Env, shader)

#define Convolve_schema(X,Y,...) \
    i_prop   (X,Y, public,     mat4f, env) \
    i_prop   (X,Y, public,     mat4f, view) \
    i_prop   (X,Y, public,     mat4f, proj) \
    i_prop   (X,Y, public,     vec2f, roughness_samples) \
    i_attr   (X,Y, Surface,    environment,  rgbaf)
declare_mod(Convolve, shader)

typedef struct _pipeline* pipeline;
typedef struct _model*    model;
typedef struct _window*   window;

#define buffer_schema(X,Y,...) \
    i_prop    (X,Y, required,   trinity,            t) \
    i_prop    (X,Y, required,   i64,                size) \
    i_prop    (X,Y, public,     ARef,               data) \
    i_prop    (X,Y, public,     bool,               u_src) \
    i_prop    (X,Y, public,     bool,               u_dst) \
    i_prop    (X,Y, public,     bool,               u_shader) \
    i_prop    (X,Y, public,     bool,               u_uniform) \
    i_prop    (X,Y, public,     bool,               u_vertex) \
    i_prop    (X,Y, public,     bool,               u_index) \
    i_prop    (X,Y, public,     bool,               u_storage) \
    i_prop    (X,Y, public,     bool,               m_device_local) \
    i_prop    (X,Y, public,     bool,               m_host_visible) \
    i_prop    (X,Y, public,     bool,               m_host_coherent) \
    i_prop    (X,Y, intern,     ARef,               user) \
    i_prop    (X,Y, intern,     VkDeviceMemory,     vk_memory, as, ARef) \
    i_prop    (X,Y, intern,     VkBuffer,           vk_buffer, as, ARef) \
    i_method  (X,Y, public,     none,               update, ARef) \
    i_method  (X,Y, public,     none,               transfer, window) \
    i_method  (X,Y, public,     ARef,               mmap) \
    i_method  (X,Y, public,     none,               unmap) \
    i_override(X,Y, method,     init, dealloc)
declare_class(buffer)


#define BlurV_schema(X,Y,...) \
    i_prop   (X,Y, public,     mat4f, model) \
    i_prop   (X,Y, public,     mat4f, view) \
    i_prop   (X,Y, public,     mat4f, proj) \
    i_attr   (X,Y, Surface,    color, rgba8)
declare_mod(BlurV, shader)

#define Blur_schema(X,Y,...) \
    i_prop   (X,Y, public,     mat4f, model) \
    i_prop   (X,Y, public,     mat4f, view) \
    i_prop   (X,Y, public,     mat4f, proj) \
    i_attr   (X,Y, Surface,    color, rgba8)
declare_mod(Blur, shader)

#define UVQuad_schema(X,Y,...) \
    i_prop   (X,Y, public,     mat4f, model) \
    i_prop   (X,Y, public,     mat4f, view) \
    i_prop   (X,Y, public,     mat4f, proj) \
    i_attr   (X,Y, Surface,    color, rgba8) \
    i_override(X,Y, method, init)
declare_mod(UVQuad, shader)

#define UXQuad_schema(X,Y,...) \
    i_prop   (X,Y, public,     mat4f, model) \
    i_prop   (X,Y, public,     mat4f, view) \
    i_prop   (X,Y, public,     mat4f, proj) \
    i_attr   (X,Y, Surface,    color, rgba8) \
    i_attr   (X,Y, Surface,    color, rgba8) \
    i_override(X,Y, method, init)
declare_mod(UXQuad, shader)

/// when created with a mere window reference, it will create a texture the size of the window
/// the last render in list will draw to swap-image; trinity works simply
/// everything renders to texture (target == texture) or the swap (target == window)
#define render_schema(X,Y,...) \
    i_prop    (X,Y, public,     trinity,                t) \
    i_prop    (X,Y, public,     window,                 w) \
    i_prop    (X,Y, public,     i32,                    width) \
    i_prop    (X,Y, public,     i32,                    height) \
    i_prop    (X,Y, public,     texture,                target) \
    i_prop    (X,Y, public,     array,                  models) \
    i_prop    (X,Y, public,     ARef,                   callback) \
    i_prop    (X,Y, public,     vec4f,                  clear_color) \
    i_prop    (X,Y, public,     texture,                color) \
    i_prop    (X,Y, public,     texture,                depth) \
    i_prop    (X,Y, intern,     array,                  canvases) \
    i_prop    (X,Y, intern,     VkCommandBuffer,        vk_command_buffer,          as, ARef) \
    i_prop    (X,Y, intern,     VkImage,                vk_swap_image,              as, ARef) \
    i_prop    (X,Y, intern,     VkFence,                vk_fence,                   as, ARef) \
    i_prop    (X,Y, intern,     VkSemaphore,            vk_semaphore,               as, ARef) \
    i_prop    (X,Y, intern,     VkSemaphore,            vk_image_available_semaphore,  as, ARef) \
    i_prop    (X,Y, intern,     VkSemaphore,            vk_render_finished_semaphore,  as, ARef) \
    i_prop    (X,Y, intern,     VkFramebuffer,          vk_framebuffer,             as, ARef) \
    i_prop    (X,Y, intern,     VkRenderPass,           vk_render_pass,             as, ARef) \
    i_method  (X,Y, public,     none,                   draw) \
    i_method  (X,Y, public,     none,                   sync_fence) \
    i_override(X,Y, method,     init, dealloc)
declare_class(render)


#define window_schema(X,Y,...) \
    i_prop    (X,Y, intern,     handle,                 window) \
    i_prop    (X,Y, required,   trinity,                t) \
    i_prop    (X,Y, opaque,     ARef,                   wndproc) \
    i_prop    (X,Y, opaque,     ARef,                   wndproc_arg) \
    i_prop    (X,Y, public,     array,                  list) \
    i_prop    (X,Y, intern,     array,                  swap_renders) \
    i_prop    (X,Y, intern,     model,                  swap_model) \
    i_prop    (X,Y, intern,     VkImage*,               vk_swap_images,        as, ARef) \
    i_prop    (X,Y, intern,     VkSurfaceKHR,           surface,               as, ARef) \
    i_prop    (X,Y, intern,     VkSwapchainKHR,         swapchain,             as, ARef) \
    i_prop    (X,Y, intern,     array,                  swap_targets) \
    i_prop    (X,Y, intern,     VkSurfaceCapabilitiesKHR*, surface_caps,        as, ARef) \
    i_prop    (X,Y, intern,     VkSurfaceFormatKHR,     surface_format,        as, i64) \
    i_prop    (X,Y, intern,     VkPresentModeKHR,       present_mode,          as, i32) \
    i_prop    (X,Y, intern,     VkExtent2D,             extent,                as, i64) \
    i_prop    (X,Y, intern,     render,                 swap_render_current) \
    i_prop    (X,Y, intern,     render,                 semaphore_frame) \
    i_prop    (X,Y, intern,     u32,                    swap_image_count) \
    i_prop    (X,Y, intern,     u32,                    swap_image_current) \
    i_prop    (X,Y, required,   u32,                    width) \
    i_prop    (X,Y, required,   u32,                    height) \
    i_prop    (X,Y, public,     Pixel,                  format) \
    i_prop    (X,Y, public,     string,                 title) \
    i_prop    (X,Y, public,     f32,                    debug_value) \
    i_prop    (X,Y, public,     bool,                   backbuffer) \
    i_prop    (X,Y, public,     i32,                    current_swap_index) \
    i_method  (X,Y, public,     none,                   resize, i32, i32) \
    i_method  (X,Y, public,     i32,                    loop, ARef, ARef) \
    i_method  (X,Y, public,     render,                 final_render) \
    i_method  (X,Y, public,     none,                   draw) \
    i_prop    (X,Y, public,     render,                 last_render) \
    i_cast    (X,Y, public,     image) \
    i_override(X,Y, method,     init, dealloc)
declare_class(window)

forward(texture)

#define join_schema(X,Y,...) \
    enum_value_v(X, Y, none,       0) \
    enum_value_v(X, Y, miter,      1) \
    enum_value_v(X, Y, round,      2) \
    enum_value_v(X, Y, bevel,      3)
declare_enum(join)


#define cap_schema(X,Y,...) \
    enum_value_v(X, Y, none,       0) \
    enum_value_v(X, Y, round,      1) \
    enum_value_v(X, Y, square,     2)
declare_enum(cap)


#define stroke_schema(X,Y,...) \
    i_prop    (X,Y, public,   f32,     width) \
    i_prop    (X,Y, public,   cap,     cap) \
    i_prop    (X,Y, public,   join,    join) \
    i_prop    (X,Y, public,   f32,     miter_limit) \
    i_prop    (X,Y, public,   f32,     dash_offset)
declare_class(stroke)


#define font_schema(X,Y,...) \
    i_prop    (X,Y, public,   path,    path) \
    i_prop    (X,Y, public,   f32,     size)
declare_class(font)


#define draw_state_schema(X,Y,...) \
    i_prop    (X,Y, public,   stroke,  stroke) \
    i_prop    (X,Y, public,   font,    font) \
    i_prop    (X,Y, public,   u32,     fill_color) \
    i_prop    (X,Y, public,   u32,     stroke_color) \
    i_method  (X,Y, public,   none,    set_default)
declare_class(draw_state)

#define canvas_schema(X,Y,...) \
    i_prop    (X,Y, required,  trinity, t) \
    i_prop    (X,Y, public,    texture, tx) \
    i_prop    (X,Y, public,    array,   state, of, draw_state) \
    i_method  (X,Y, interface, none,    save) \
    i_method  (X,Y, interface, none,    restore) \
    i_method  (X,Y, interface, none,    move_to,     f32, f32) \
    i_method  (X,Y, interface, none,    line_to,     f32, f32) \
    i_method  (X,Y, interface, none,    arc_to,      f32, f32, f32, f32, f32) \
    i_method  (X,Y, interface, none,    arc,         f32, f32, f32, f32, f32) \
    i_method  (X,Y, interface, none,    rect_to,     f32, f32, f32, f32) \
    i_method  (X,Y, interface, none,    fill_color,  object) \
    i_method  (X,Y, interface, none,    stroke_color, object) \
    i_method  (X,Y, interface, none,    clear,       object) \
    i_method  (X,Y, interface, none,    set_stroke,  stroke) \
    i_method  (X,Y, interface, none,    set_font,    font) \
    i_method  (X,Y, interface, none,    cubic,       f32, f32, f32, f32, f32, f32) \
    i_method  (X,Y, interface, none,    quadratic,   f32, f32, f32, f32) \
    i_method  (X,Y, interface, none,    draw_fill,   bool) \
    i_method  (X,Y, interface, none,    draw_stroke, bool) \
    i_method  (X,Y, interface, none,    sync) \
    i_method  (X,Y, interface, none,    prepare) \
    i_method  (X,Y, interface, none,    output_mode, bool) \
    i_method  (X,Y, interface, none,    resize_texture, i32, i32)
declare_mod(canvas, image)



#define command_schema(X,Y,...) \
    i_prop(X,Y, required, trinity, t) \
    i_prop(X,Y, intern,   VkCommandBuffer,  vk, as, ARef) \
    i_method  (X,Y, public, none, begin) \
    i_method  (X,Y, public, none, submit) \
    i_override(X,Y, method, init, dealloc)
declare_class(command)


#define texture_schema(X,Y,...) \
    i_prop(X,Y, public,   trinity,          t) \
    i_prop(X,Y, public,   window,           w) \
    i_prop(X,Y, public,   Pixel,            format) \
    i_prop(X,Y, public,   object,           sampler) \
    i_prop(X,Y, public,   i32,              width) \
    i_prop(X,Y, public,   i32,              height) \
    i_prop(X,Y, public,   bool,             swap) \
    i_prop(X,Y, public,   i32,              mip_levels) \
    i_prop(X,Y, public,   i32,              layer_count) \
    i_prop(X,Y, public,   Surface,          surface) \
    i_prop(X,Y, public,   bool,             window_size) \
    i_prop(X,Y, public,   bool,             linear) \
    i_prop(X,Y, intern,   VkImageLayout,    vk_layout,      as, i32) \
    i_prop(X,Y, intern,   VkFormat,         vk_format,      as, i32) \
    i_prop(X,Y, intern,   VkImage,          vk_image,       as, ARef) \
    i_prop(X,Y, intern,   VkImageView,      vk_image_view,  as, ARef) \
    i_prop(X,Y, intern,   VkSampler,        vk_sampler,     as, ARef) \
    i_prop(X,Y, intern,   VkDeviceMemory,   vk_memory,      as, ARef) \
    i_method(X,Y, public, none, resize, i32, i32) \
    i_method(X,Y, public, none, transition, i32) \
    i_override(X,Y, method, init, dealloc)
declare_class(texture)

typedef struct _Accessor* Accessor;
typedef struct vertex_member_t {
    AType    type;
    Accessor ac;
    i64      size;
    i64      offset;
} vertex_member_t;

#define gpu_schema(X,Y,...) \
    i_prop(X,Y, required, trinity,      t) \
    i_prop(X,Y, required, cstr,         name) \
    i_prop(X,Y, public,   image,        sampler) \
    i_prop(X,Y, intern,   texture,      tx) \
    i_prop(X,Y, public,   object,       vertex_data) \
    i_prop(X,Y, public,   object,       index_data) \
    i_vprop(X,Y, public,  vertex_member_t, members) \
    i_prop(X,Y, public,   i32,          member_count) \
    i_prop(X,Y, public,   i32,          index_size) \
    i_prop(X,Y, public,   i32,          index_count) \
    i_prop(X,Y, public,   i32,          vertex_size) \
    i_prop(X,Y, public,   i32,          vertex_count) \
    i_prop(X,Y, intern,   buffer,       vertex) \
    i_prop(X,Y, intern,   buffer,       index) \
    i_prop(X,Y, intern,   VkImage,      vk_image,       as, ARef) \
    i_prop(X,Y, intern,   VkImageView,  vk_image_view,  as, ARef) \
    i_prop(X,Y, intern,   VkSampler,    vk_sampler,     as, ARef) \
    i_prop(X,Y, intern,   VkDeviceMemory, vk_memory,    as, ARef) \
    i_prop(X,Y, public,   bool,         compute) \
    i_method(X,Y, public, none,         sync, window) \
    i_override(X,Y, method, init, dealloc)
declare_class(gpu)

/// shader is an array
///

typedef struct _Material* Material;
#define pipeline_schema(X,Y,...) \
    i_prop    (X,Y, required,   trinity,                t) \
    i_prop    (X,Y, required,   window,                 w) \
    i_prop    (X,Y, required,   render,                 r) \
    i_prop    (X,Y, public,     i32,                    test2) \
    i_prop    (X,Y, public,     mat4f,                  model) \
    i_prop    (X,Y, public,     Material,               material) \
    i_prop    (X,Y, public,     array,                  samplers) \
    i_prop    (X,Y, required,   shader,                 s) \
    i_prop    (X,Y, intern,     array,                  resources) \
    i_prop    (X,Y, intern,     uniforms,               shader_uniforms) \
    i_prop    (X,Y, intern,     gpu,                    vbo) \
    i_prop    (X,Y, intern,     gpu,                    memory) \
    i_array   (X,Y, intern,     VkDescriptorSetLayout,  2, descriptor_layouts) \
    i_prop    (X,Y, intern,     VkDescriptorPool,       descriptor_pool,    as, ARef) \
    i_prop    (X,Y, intern,     VkDescriptorSet,        bind,               as, ARef) \
    i_prop    (X,Y, intern,     VkPipeline,             vk_render,          as, ARef) \
    i_prop    (X,Y, intern,     VkPipeline,             vk_compute,         as, ARef) \
    i_prop    (X,Y, intern,     VkPipelineLayout,       layout,             as, ARef) \
    i_array   (X,Y, intern,     VkDescriptorSet, 2,     descriptor_sets) \
    i_method  (X,Y, public,     none, draw,             handle) \
    i_method  (X,Y, public,     none, bind_resources) \
    i_override(X,Y, method,     init, dealloc)
declare_class(pipeline)

/// will handle different texture overrides and uniforms
/// name must match a Mesh in glTF data
typedef struct _Primitive* Primitive;
#define gltf_part_schema(X,Y,...) \
    i_prop    (X,Y, required, Primitive, id) \
    i_prop    (X,Y, public  , shader, s)
declare_class(gltf_part)

// we definitely want to allow for a null parts, which will render the entire node with the default shader!
typedef struct _Node* Node;
#define gltf_node_schema(X,Y,...) \
    i_prop    (X,Y, public,   Node,   id) \
    i_prop    (X,Y, public,   array,  parts, of, gltf_part)
declare_class(gltf_node)

#define node_default null

typedef struct _Model* Model;
#define model_schema(X,Y,...) \
    i_prop    (X,Y, public,   trinity, t) \
    i_prop    (X,Y, required, window,  w) \
    i_prop    (X,Y, public,   render,  r) \
    i_prop    (X,Y, public,   Model,   id) \
    i_prop    (X,Y, public,   array,   nodes) \
    i_prop    (X,Y, public,   shader,  s) \
    i_prop    (X,Y, public,   array,   samplers) \
    i_prop    (X,Y, intern,   array,   pipelines) \
    i_method  (X,Y, public,   none,    finish, render) \
    i_override(X,Y, method, init, dealloc)
declare_class(model)

#define particle_schema(X,Y,...) \
    i_inlay   (X,Y, public, vec2f,  pos) \
    i_inlay   (X,Y, public, vec2f,  velocity) \
    i_prop    (X,Y, public, f32,    density) \
    i_prop    (X,Y, public, f32,    pressure)
declare_class(particle)

#endif