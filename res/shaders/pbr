#version 450

layout(set = 0, binding = 0) uniform World {
    vec4 pos;
    vec4 dir;
    mat4 model;
    mat4 view;
    mat4 proj;
} world;

layout(set = 1, binding = 0)  uniform sampler2D tx_color;       // color + alpha
layout(set = 1, binding = 1)  uniform sampler2D tx_normal;      // rgb
layout(set = 1, binding = 2)  uniform sampler2D tx_emission;    // rgb + intensity
layout(set = 1, binding = 3)  uniform sampler2D tx_rough;       // 0.0 -> 1.0
layout(set = 1, binding = 4)  uniform sampler2D tx_metal;       // 0.0 -> 1.0
layout(set = 1, binding = 5)  uniform sampler2D tx_height;      // 0.0 -> 1.0 ( 0.5 mid )
layout(set = 1, binding = 6)  uniform sampler2D tx_ao;          // 0.0 -> 1.0
layout(set = 1, binding = 7)  uniform samplerCubeArray tx_environment; // 0.0 -> 1.0


// PBR functions based on Disney standard
// Constants
const float PI = 3.14159265359;
const float EPSILON = 0.0001;

// Helper functions
float pow2(float x) { return x * x; }
float pow5(float x) { float x2 = x * x; return x2 * x2 * x; }

// Proper gamma handling
vec3 sRGBToLinear(vec3 srgbColor) {
    return pow(srgbColor, vec3(2.2));
}

vec3 linearToSRGB(vec3 srgbColor) {
    return pow(srgbColor, vec3(1.0/2.2));
}

// Fresnel Schlick approximation
vec3 F_Schlick(vec3 f0, float cos_theta) {
    return f0 + (1.0 - f0) * pow5(1.0 - cos_theta);
}

// Normal Distribution Function: GGX/Trowbridge-Reitz
float D_GGX(float roughness, float NdotH) {
    float alpha = pow2(roughness);
    float alpha_sq = pow2(alpha);
    float denom = pow2(NdotH) * (alpha_sq - 1.0) + 1.0;
    return alpha_sq / (PI * pow2(denom));
}

// Geometry Function: Smith with GGX
float G_Smith(float roughness, float NdotV, float NdotL) {
    float k = pow2(roughness + 1.0) / 8.0;
    float G1_V = NdotV / max((NdotV * (1.0 - k) + k), 0.0001);
    float G1_L = NdotL / max((NdotL * (1.0 - k) + k), 0.0001);
    return G1_V * G1_L;
}


// Then modify the BRDF function to use these adjustments:
vec3 BRDF(vec3 L, vec3 V, vec3 N, vec3 albedo, float metallic, float roughness) {
    // Clamp roughness to avoid divide by zero in D_GGX
    roughness = max(roughness, 0.05);
    
    vec3 H = normalize(L + V);
    
    float NdotL = max(dot(N, L), 0.0);
    float NdotV = max(dot(N, V), 0.0);
    float NdotH = max(dot(N, H), 0.0);
    float HdotV = max(dot(H, V), 0.0);
    
    // F0 represents the base reflectivity
    vec3 F0 = vec3(0.04);
    F0 = mix(F0, albedo, metallic);
    
    // Calculate Cook-Torrance components
    vec3 F = F_Schlick(F0, HdotV);
    float D = D_GGX(roughness, NdotH);
    float G = G_Smith(roughness, NdotV, NdotL);
    
    // Specular term
    vec3 specular = (D * F * G) / max(4.0 * NdotV * NdotL, EPSILON);
    
    // Diffuse term - metallic surfaces have no diffuse
    vec3 kD = (vec3(1.0) - F) * (1.0 - metallic);
    vec3 diffuse = kD * albedo / PI;
    
    return (diffuse + specular) * NdotL;
}
