#version 450

struct Particle {
    vec2 pos;
    vec2 velocity;
    float density;
    float pressure;
};

// Storage buffer for particles
layout(std430, binding = 0) buffer Particles {
    Particle particles[];
};

// Workgroup size
layout(local_size_x = 64, local_size_y = 1, local_size_z = 1) in;

// Kernel functions
float poly6_kernel(float distance, float smoothing_radius) {
    float h2 = smoothing_radius * smoothing_radius;
    float r2 = distance * distance;

    if (distance >= 0.0 && distance <= smoothing_radius) {
        float factor = h2 - r2;
        return (315.0 / (64.0 * 3.14159265359 * pow(smoothing_radius, 9.0))) * factor * factor * factor;
    } else {
        return 0.0;
    }
}

vec2 spiky_gradient_kernel(vec2 direction, float smoothing_radius) {
    float distance = length(direction);
    if (distance > 0.0 && distance <= smoothing_radius) {
        float factor = (smoothing_radius - distance) * (smoothing_radius - distance);
        float normalization = -45.0 / (3.14159265359 * pow(smoothing_radius, 6.0)); // 2D normalization constant
        return normalization * factor * normalize(direction);
    } else {
        return vec2(0.0, 0.0);
    }
}

float laplacian_viscosity_kernel(float distance, float smoothing_radius) {
    if (distance >= 0.0 && distance <= smoothing_radius) {
        float normalization = 45.0 / (3.14159265359 * pow(smoothing_radius, 5.0)); // 2D normalization constant
        return normalization * (smoothing_radius - distance);
    } else {
        return 0.0;
    }
}

// Main compute function
void main() {
    uint i = gl_GlobalInvocationID.x; // Current particle index
    float timestep = 0.016; // Time step for simulation (16 ms for 60 FPS)
    float stiffness_constant = 200.0; // Controls the pressure force intensity
    float rest_density = 1.0; // Reference density for the fluid
    float viscosity = 0.1; // Coefficient of viscosity for smoothing
    float smoothing_radius = 0.1; // Radius of influence for particles
    float particle_mass = 1.0; // Mass of each particle
    vec2 gravity = vec2(0.0, -9.8); // Gravity in the simulation

    // Ensure the particle index is within bounds
    if (i >= particles.length()) {
        return;
    }

    // Initialize local variables
    float density = 0.0;
    vec2 force = gravity * particle_mass;

    // Loop through all particles
    for (uint j = 0; j < particles.length(); j++) {
        if (i == j) { continue; }

        vec2 r = particles[j].pos - particles[i].pos;
        float dist = length(r);

        if (dist < smoothing_radius) {
            // Accumulate density using kernel function
            density += particle_mass * poly6_kernel(dist, smoothing_radius);

            // Compute pressure force using gradient kernel
            float pressure_term = (particles[i].pressure + particles[j].pressure) / (2.0 * particles[j].density);
            force -= pressure_term * spiky_gradient_kernel(r, smoothing_radius);

            // Add viscosity force
            force += viscosity * (particles[j].velocity - particles[i].velocity) * 
                     laplacian_viscosity_kernel(dist, smoothing_radius);
        }
    }

    // Update density and pressure for the current particle
    particles[i].density = density;
    particles[i].pressure = stiffness_constant * max(0.0, density - rest_density);

    // Apply accumulated forces to velocity
    particles[i].velocity += force * timestep;
}
